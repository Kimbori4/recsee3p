#==============================================================================
# [INILOG4J 설명]
# -. INILOG4J 컴포넌트는 Apahce Log4J 로깅 컴포넌트를 기본엔진으로 사용한다.
# -. INILOG4J 에서 사용하는 Appender나 Layout 객체는 LOG4J를 사용하고 있으므로 자세한 내용은 
#    LOG4J 관련 내용을 참고한다. 
#    (APACHE LOG4J 공식 홈페이지 http://logging.apache.org/log4j/docs/index.html)
# -. INILOG4J는 LOG4J의 Level(or Category)클래스를 override 하여 사용하고 있으므로
#    일반 LOG4J 컴포넌트와는 몇몇 로그레벨이 호환되지 않을수 있다.
#    다음은 INILOG4J에서 사용하는 LOGGING LEVEL 이다.
#    (LOG LEVEL 추가 사항 : NOTICE 레벨이 추가되었음)
#    OFF > FATAL > ERROR > WARN > NOTICE > INFO > DEBUG > ALL
# -. INILOG4J 에서 사용하는 DOMConfigurator를 위한 log4j.dtd 파일은 LOG4J XML DTD
#    파일을 그대로 따른다.
# -. INILOG4J의 내부 로그를 보고 싶다면 JVM 옵션으로 다음과 같이 설정한다.
#    -Dinilog4j.debug=true
#
# [Apache Log4J 특징]
# -. Log4j는 로그 시스템의 레벨을 설정하여 출력가능하다.
# -. Log4j는 로그 시스템에 대해서 상속관계를 성립하여 사용할 수 있다.
#    즉, RootLogger 가 존재하며, RootLogger를 상속받는 로거들은 모두 RootLogger의 속성을
#    그래도 사용할 수 있다.
# -. Log4j는 크게 Logger, Appender, Layout 으로 구성된다.
#    Logger : 로그 메세지를 LoggingEvent를 통해서 Appender에 전달하는 역할
#    Appender : 로그 메세지를 파일이나 DB에 저장하는 역할을 수행하며, 메세지 포맷은 Layout을
#               통해서 결정한다.
#    Layout : 로그 메세지의 다양한 출력 포맷을 처리한다.
#-----------------------------------------------------------------------------
# [INILOG4J 로그 기본 설정]
# 로그타입설정 : STDOUT, FILE, XML, HTTP, ...
# 로그레벨 설정 : OFF > FATAL > ERROR > WARN > NOTICE > INFO > DEBUG > ALL
#
# 로그 설정 설명 
# -. inilog4j.logger.logger_name=[INHERITED|LEVEL|NULL], APPENDER_NAME1, APPENDER_NAME2
#    	INIHERITED : 상위 로거의 속성을 그대로 이어 받는다.
#    ex) inilog4j.rootLogger=INFO, stdout
#        : 첫번째 예제는 루트로거를 사용하며, 로그레벨은 INFO 이고, stdout에 로그를 쌓는다.
#        inilog4j.logger.examples.logger=TRACE, rolling
#        : 두번째 예제는 examples.logger 계층의 로그를 사용하며, 레벨은 TRACE이고, 파일에
#          로그정보를 출력한다. examples.logger는 상위 examples와 하위 logger 의 로거계층
#          을 갖는다.
#
# 로그 PatterLayout 출력 설명
#  d : 시간을 출력한다. - java.text.SimpleDateFormat 참고
#       예) %d{yyyy/MM/dd HH:mm:ss} : 2004/05/20 10:15:22
#           %d{ABSOLUTE}              : 10:15:22,345  (밀리세컨드까지 기록)
#  c : 패키지 명의 클래스이름만 뽑아온다.
#      예) org.apache.xyz.SomeClass : %C{1} --> SomeClass
#          org.apache.xyz.SomeClass : %C{2} --> xyz.SomeClass
#  L : 라인넘버 넣기
#  m : 로그메세지 출력
#  M : 로그메세지를 기록하려는 메소드 이름을 출력
#  n : \n", or "\r\n" 추가
#  t : thread name 출력
#  F : log 메세지를 직접 출력하는 클래스명을 출력 (ex : Logger 클래스)
#  p : 로그메세지 레벨 출력 
#      예) %5p : 다섯칸을 기준으로 디버그 정보를 출력한다.
#         [DEBUG], [ INFO]
#
#==============================================================================

# rootLogger 를 사용하면 rootLogger(or rootCategory)를 사용하는 모든 로그들이 섞여서 나온다.
# 그러므로 별도의 logger_name 을 설정하여 사용하도록 한다.
inilog4j.rootLogger=OFF, stdout, rolling

# 아래와 같이 패키지명을 지정해주면 해당 패키지 이하 클래스에서 출력하는
# 로그들은 별도의 지정된 로그파일에 쌓이게 된다.
inilog4j.logger.examples.logger=TRACE, stdout, rolling

# true라면 상위 Appender (즉, Root Appender)를 상속받아서 그 설정을 그대로 사용하게 된다.
# false라면 상위 Appender의 설정을 무시하고 자기의 설정값만 처리한다.
inilog4j.additivity.examples.logger=false

# User define LoggerFactory
#inilog4j.loggerFactory=com.initech.logger.common.IniLoggerFactory

#  Console Appneder 형식 지정하기
inilog4j.appender.stdout=com.initech.common.logger.ConsoleAppender
inilog4j.appender.stdout.layout=com.initech.common.logger.PatternLayout
#inilog4j.appender.stdout.layout.ConversionPattern=[%5p] [%d{HH:mm:ss} %c{1}] %m%n
inilog4j.appender.stdout.layout.ConversionPattern=[%d{yyyy/MM/dd HH:mm:ss}][%6p][%c{1}] %m%n

#  DailyRolling Appneder 형식 지정하기
inilog4j.appender.rolling=com.initech.common.logger.DailyRollingFileAppender
inilog4j.appender.rolling.layout=com.initech.common.logger.PatternLayout
inilog4j.appender.rolling.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss} %5p] %m%n

# 밑의 내용은 하루 단위로 로그 메세지를 백업받을때 백업명을 지정한다.
inilog4j.appender.rolling.DatePattern='.'yyyy-MM-dd
inilog4j.appender.rolling.Append = true
#inilog4j.appender.rolling.MaxFileSize=1000KB
#inilog4j.appender.rolling.MaxBackupIndex=5
#inilog4j.appender.rolling.File=/SWLOG/WAS/SafeDBAccess.log
