<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "org.mybatis/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.furence.recsee.statistics.dao.StatisticsInfoDao">
	<resultMap id="BaseResultMap" type="com.furence.recsee.statistics.model.StatisticsInfo">
		<result column="R_USER_ID" jdbcType="VARCHAR" property="userId" />
		<result column="R_USER_NAME" jdbcType="VARCHAR" property="userName" />
		<result column="R_EXT_NO" jdbcType="VARCHAR" property="extNo" />
		<result column="R_BG_CODE" jdbcType="VARCHAR" property="bgCode" />
		<result column="R_MG_CODE" jdbcType="VARCHAR" property="mgCode" />
		<result column="R_SG_CODE" jdbcType="VARCHAR" property="sgCode" />
		<result column="R_REC_DATE" jdbcType="VARCHAR" property="recDate" />
		<result column="R_REC_RTIME" jdbcType="VARCHAR" property="recRTime" />
		<result column="R_V_SYS_CODE" jdbcType="VARCHAR" property="vSysCode" />
		<result column="TOTAL_CALLS" jdbcType="INTEGER" property="totalCalls" />
		<result column="TOTAL_TIME" jdbcType="INTEGER" property="totalTime" />
		<result column="INBOUND_CALLS" jdbcType="INTEGER" property="inboundCalls" />
		<result column="INBOUND_TIME" jdbcType="INTEGER" property="inboundTime" />
		<result column="OUTBOUND_CALLS" jdbcType="INTEGER" property="outboundCalls" />
		<result column="OUTBOUND_TIME" jdbcType="INTEGER" property="outboundTime" />
		<result column="TRANSFER_CALLS" jdbcType="INTEGER" property="transferCalls" />
		<result column="TRANSFER_TIME" jdbcType="INTEGER" property="transferTime" />
		<result column="CONFERENCE_CALLS" jdbcType="INTEGER" property="conferenceCalls" />
		<result column="CONFERENCE_TIME" jdbcType="INTEGER" property="conferenceTime" />
		<result column="INTERNAL_CALLS" jdbcType="INTEGER" property="internalCalls" />
		<result column="INTERNAL_TIME" jdbcType="INTEGER" property="internalTime" />
		<result column="NO_RECODING_COUNT" jdbcType="INTEGER" property="noRecodingCount" />
		<result column="R_BG_NAME" jdbcType="VARCHAR" property="bgName" />
		<result column="R_MG_NAME" jdbcType="VARCHAR" property="mgName" />
		<result column="R_SG_NAME" jdbcType="VARCHAR" property="sgName" />
		<result column="min_call_time" jdbcType="VARCHAR" property="minCallTime" />
		<result column="max_call_time" jdbcType="VARCHAR" property="maxCallTime" />
		<result column="avg_call_time" jdbcType="VARCHAR" property="avgCallTime" />
		<result column="sec30" jdbcType="VARCHAR" property="sec30" />
		<result column="sec60" jdbcType="VARCHAR" property="sec60" />
		<result column="sec120" jdbcType="VARCHAR" property="sec120" />
		<result column="sec180" jdbcType="VARCHAR" property="sec180" />
		<result column="sec240" jdbcType="VARCHAR" property="sec240" />
		<result column="sec300" jdbcType="VARCHAR" property="sec300" />
		<result column="sec420" jdbcType="VARCHAR" property="sec420" />
		<result column="sec600" jdbcType="VARCHAR" property="sec600" />
		<result column="moresec600" jdbcType="VARCHAR" property="moresec600" />
		<result column="REAL_CALLS" jdbcType="VARCHAR" property="realCalls" />
		<result column="REAL_CALL_TIME" jdbcType="VARCHAR" property="realCallTime" />
		<result column="total" jdbcType="VARCHAR" property="totalCallbytime" />
		<result column="SUCCESS_CONNECT" jdbcType="INTEGER" property="success_connect" />
		<result column="GIVEUP_CALL" jdbcType="INTEGER" property="giveup_call" />
		<result column="NO_ANSWER" jdbcType="INTEGER" property="no_answer" />
		<result column="BUSY_CALL" jdbcType="INTEGER" property="busy_call" />
		<result column="R_MONTH" jdbcType="VARCHAR" property="r_month" />
		<result column="TOTAL_USER" jdbcType="VARCHAR" property="total_user"/>
		<result column="PosStart" jdbcType="VARCHAR" property="posStart"/>
		<result column="Count" jdbcType="VARCHAR" property="count"/>
		<result column="ExcelDownload" jdbcType="VARCHAR" property="excelDownload"/>
		<result column="tmp_date" jdbcType="VARCHAR" property="dayOfWeek"/>
		<result column="R_REC_SDATE" jdbcType="VARCHAR" property="recSDate"/>
		<result column="R_REC_EDATE" jdbcType="VARCHAR" property="recEDate"/>
	</resultMap>
	
	<resultMap id="keyWordResultMap" type="com.furence.recsee.statistics.model.StatisticsInfo">
      <result column="R_KEYWORD_CODE" jdbcType="VARCHAR" property="keywordCode" />
      <result column="R_KEYWORD_NAME" jdbcType="VARCHAR" property="keywordName" />
      <result column="R_USE_YN" jdbcType="VARCHAR" property="useYn" />
      <result column="R_KEYWORD_SUM" jdbcType="INTEGER" property="keywordSum" />
      <result column="ROWNUMBER" jdbcType="INTEGER" property="rowNumber" />
      <result column="R_CATEGORY_CODE" jdbcType="VARCHAR" property="categoryCode" />
      <result column="R_CATEGORY_NAME" jdbcType="VARCHAR" property="categoryName" />
      <result column="R_KEYWORD_COUNT" jdbcType="INTEGER" property="keywordCount" />
   	</resultMap>


	<!--

	날짜 사이 (입력날짜 사이) 구해주는 쿼리

	with dateList as (

		/*
		년
		시작날짜, 끝날짜, 시작날짜
		select to_char(cast('2017-01-01' as date) + interval '1' year * s.a, 'yyyy') as strDate
		from generate_series(0, (select (date_part ('year', cast('2020-01-01' as date)) - date_part('year', cast('2017-01-01' as date))))::integer, 1) as s(a)
		*/

		/*
		월
		시작날짜, 끝날짜, 시작날짜, 끝날짜, 시작날짜
		select to_char(cast('2017-12-01' as date) + interval '1' month * s.a, 'yyyymm') as strDate
		from generate_series(0, (select (date_part ('year', cast('2020-02-01' as date)) -date_part('year', cast('2017-12-01' as date))	) *12 +(date_part ('month', cast('2020-02-01' as date)) -date_part('month', cast('2017-12-01' as date))))::integer, 1) as s(a)
		*/
		/*
		일
		시작날짜, 끝날짜, 시작날짜
		select to_char(cast('2017-01-01' as date) + interval '1' day * s.a, 'yyyymmdd') as strDate
		from generate_series(0, (select (date_part ('day', cast('2020-01-01' as timestamp ) - cast('2017-01-01' as timestamp))))::integer, 1) as s(a)
		*/




		)

	select * from dateList

	 -->






	<select id="selectCallsStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)
		<if test="dayTimeBy!='dateBy' and dayTimeBy!='monthBy' and dayTimeBy!='dayWeekBy' and dayTimeBy!='weekBy'">
		,TEMP_TIME AS(
					SELECT LPAD(GENERATE_SERIES('8','22',1)::TEXT,2,'0') AS TMP_TIME
			)
		</if>
		<choose>
			<when test="dayTimeBy=='dateBy' or dayTimeBy=='monthBy' or dayTimeBy == 'dayWeekBy' or dayTimeBy == 'weekBy'">
				SELECT
					<choose>
						<when test="dayTimeBy=='monthBy'">
							Substr(r_rec_date, 1, 6) AS R_REC_DATE
						</when>
						<when test="dayTimeBy=='dayWeekBy'">
							extract(isodow from r_rec_date::date) AS dayOfWeek
						</when>
						<when test="dayTimeBy=='weekBy'">
							to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD') AS R_REC_DATE
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						,	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						,	R_SG_NAME
						</if>
					</if>
					,	COUNT(*) AS TOTAL_CALLS
					,	SUM(COALESCE(R_CALL_TTIME::INTEGER,0)) AS TOTAL_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
					,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
					,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
					,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
					,	SUM(COALESCE(R_CALL_TTIME_CONNECT::INTEGER,0)) AS REAL_CALL_TIME
			FROM RS_RECFILE
				<if test='authBeforeGroup != "Y"'>
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
				</if>
				 ,INLINE
				WHERE
					R_REC_DATE BETWEEN #{sDate} AND #{eDate}
					AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
					AND RS_RECFILE.R_USER_ID IS NOT NULL
					AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
				GROUP BY 
					<choose>
						<when test="dayTimeBy=='monthBy'">
							Substr(r_rec_date, 1, 6) 
						</when>
						<when test="dayTimeBy=='dayWeekBy'">
							extract(isodow from r_rec_date::date) 
						</when>
						<when test="dayTimeBy=='weekBy'">
							to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD') 
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						, 	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						, 	R_SG_NAME
						</if>
					</if>
				ORDER BY 
					<choose>
						<when test="dayTimeBy=='monthBy'">
							Substr(r_rec_date, 1, 6) 
						</when>
						<when test="dayTimeBy=='dayWeekBy'">
							extract(isodow from r_rec_date::date) 
						</when>
						<when test="dayTimeBy=='weekBy'">
							to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD') 
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>
			</when>
			<otherwise>
				SELECT
					TMP_TIME as R_REC_RTIME,
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						a.R_BG_NAME,
						</if>
						<if test="mgCodeL != null">
						a.R_MG_NAME,
						</if>
						<if test="sgCodeL != null">
						a.R_SG_NAME,
						</if>
					</if>
					coalesce(TOTAL_CALLS,'0') as TOTAL_CALLS,coalesce(TOTAL_TIME,'0') as TOTAL_TIME,
					coalesce(INBOUND_CALLS,'0') as INBOUND_CALLS,coalesce(INBOUND_TIME,'0') as INBOUND_TIME,
					coalesce(OUTBOUND_CALLS,'0') as OUTBOUND_CALLS,coalesce(OUTBOUND_TIME,'0') as OUTBOUND_TIME,
					coalesce(TRANSFER_CALLS,'0') as TRANSFER_CALLS,coalesce(TRANSFER_TIME,'0') as TRANSFER_TIME,
					coalesce(CONFERENCE_CALLS,'0') as CONFERENCE_CALLS,coalesce(CONFERENCE_TIME,'0') as CONFERENCE_TIME,
					coalesce(INTERNAL_CALLS,'0') as INTERNAL_CALLS,coalesce(INTERNAL_TIME,'0') as INTERNAL_TIME,
					coalesce(REAL_CALLS,'0') as REAL_CALLS,coalesce(REAL_CALL_TIME,'0') as REAL_CALL_TIME
				FROM(
				(
					SELECT
						R_REC_RTIME
						<if test='authBeforeGroup != "Y"'>
							<if test="bgCodeL != null">
							,	R_BG_NAME
							</if>
							<if test="mgCodeL != null">
							,	R_MG_NAME
							</if>
							<if test="sgCodeL != null">
							,	R_SG_NAME
							</if>
						</if>
					,	COUNT(*) AS TOTAL_CALLS
					,	SUM(COALESCE(R_CALL_TTIME::INTEGER,0)) AS TOTAL_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
					,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
					,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
					,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
					,	SUM(COALESCE(R_CALL_TTIME_CONNECT::INTEGER,0)) AS REAL_CALL_TIME

					FROM RS_RECFILE
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
						</if>
						<if test="mgCodeL != null">
						LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
						</if>
						<if test="sgCodeL != null">
						LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
						</if>
					</if>
					, INLINE
					WHERE
						R_REC_DATE BETWEEN #{sDate} AND #{eDate}
						AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
						AND RS_RECFILE.R_USER_ID IS NOT NULL
						AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
					GROUP BY R_REC_RTIME
						<if test='authBeforeGroup != "Y"'>
							 <if test="bgCodeL != null">
								, 	R_BG_NAME
							 </if>
							 <if test="mgCodeL != null">
								,	R_MG_NAME
							 </if>
							 <if test="sgCodeL != null">
								, 	R_SG_NAME
							 </if>
						 </if>) a
					RIGHT OUTER JOIN TEMP_TIME ON R_REC_RTIME=TMP_TIME
				)
				<if test="init == 'true'">
				where 1=0
				</if>
				ORDER BY R_REC_RTIME
			</otherwise>
		</choose>
	</select>
	<select id="selectCallsStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="sqlserver" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT CONVERT(INTEGER,R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)
		<if test="dayTimeBy!='dateBy' and dayTimeBy!='monthBy'">
		,TEMP_TIME AS(
					 SELECT convert(varchar(2),g.IntValue) AS TMP_TIME
 						 FROM generate_series(8 , 22, 1 ) g
			)
		</if>
		<choose>
			<when test="dayTimeBy=='dateBy' or dayTimeBy=='monthBy'">
				SELECT
					R_REC_DATE
					<if test="bgCodeL != null">
					,	R_BG_NAME
					</if>
					<if test="mgCodeL != null">
					,	R_MG_NAME
					</if>
					<if test="sgCodeL != null">
					,	R_SG_NAME
					</if>
					,	COUNT(*) AS TOTAL_CALLS
					,	SUM(COALESCE(convert(integer,R_CALL_TTIME),0)) AS TOTAL_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
					,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
					,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
					,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
					,	SUM(COALESCE(CONVERT(INTEGER,R_CALL_TTIME_CONNECT),0)) AS REAL_CALL_TIME
			FROM RS_RECFILE
				<if test="bgCodeL != null">
				LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
				</if>
				<if test="mgCodeL != null">
				LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
				</if>
				<if test="sgCodeL != null">
				LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
				</if>
				, INLINE
				WHERE
					R_REC_DATE BETWEEN #{sDate} AND #{eDate}
					AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
					AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
					AND RS_RECFILE.R_USER_ID IS NOT NULL
					AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
				GROUP BY R_REC_DATE
						<if test="bgCodeL != null">
						, 	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						, 	R_SG_NAME
						</if>
				ORDER BY R_REC_DATE
			</when>
			<otherwise>
				SELECT
					TMP_TIME as R_REC_RTIME,
					<if test="bgCodeL != null">
					a.R_BG_NAME,
					</if>
					<if test="mgCodeL != null">
					a.R_MG_NAME,
					</if>
					<if test="sgCodeL != null">
					a.R_SG_NAME,
					</if>
					coalesce(TOTAL_CALLS,'0') as TOTAL_CALLS,coalesce(TOTAL_TIME,'0') as TOTAL_TIME,
					coalesce(INBOUND_CALLS,'0') as INBOUND_CALLS,coalesce(INBOUND_TIME,'0') as INBOUND_TIME,
					coalesce(OUTBOUND_CALLS,'0') as OUTBOUND_CALLS,coalesce(OUTBOUND_TIME,'0') as OUTBOUND_TIME,
					coalesce(TRANSFER_CALLS,'0') as TRANSFER_CALLS,coalesce(TRANSFER_TIME,'0') as TRANSFER_TIME,
					coalesce(CONFERENCE_CALLS,'0') as CONFERENCE_CALLS,coalesce(CONFERENCE_TIME,'0') as CONFERENCE_TIME,
					coalesce(INTERNAL_CALLS,'0') as INTERNAL_CALLS,coalesce(INTERNAL_TIME,'0') as INTERNAL_TIME,
					coalesce(REAL_CALLS,'0') as REAL_CALLS,coalesce(REAL_CALL_TIME,'0') as REAL_CALL_TIME
				FROM(
				(
					SELECT
						R_REC_RTIME
						<if test="bgCodeL != null">
						,	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						,	R_SG_NAME
						</if>
							,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(convert(integer,R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(COALESCE(CONVERT(INTEGER,R_CALL_TTIME_CONNECT),0)) AS REAL_CALL_TIME

					FROM RS_RECFILE
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
					, INLINE
					WHERE
						R_REC_DATE BETWEEN #{sDate} AND #{eDate}
						AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
						AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
						AND RS_RECFILE.R_USER_ID IS NOT NULL
						AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
						<if test="vSysCode != null">
						AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
						</if>
					GROUP BY R_REC_RTIME
							 <if test="bgCodeL != null">
								, 	R_BG_NAME
							 </if>
							 <if test="mgCodeL != null">
								,	R_MG_NAME
							 </if>
							 <if test="sgCodeL != null">
								, 	R_SG_NAME
							 </if>) a
					RIGHT OUTER JOIN TEMP_TIME ON R_REC_RTIME=TMP_TIME
				)
				<if test="init == 'true'">
				where 1=0
				</if>
				 ORDER BY
					 CASE WHEN len(R_REC_RTIME) =1 THEN R_REC_RTIME END DESC
			</otherwise>
		</choose>
	</select>
	<select id="selectCallsStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)
		<if test="dayTimeBy!='dateBy' and dayTimeBy!='monthBy'">
		,TEMP_TIME AS(
					<!-- SELECT TO_CHAR(7 + LEVEL) AS TMP_TIME FROM DUAL -->
					SELECT 7 + LEVEL AS TMP_TIME FROM DUAL
         		 	CONNECT BY LEVEL <![CDATA[<]]> 16
			)
		</if>
		<choose>
			<when test="dayTimeBy=='dateBy' or dayTimeBy=='monthBy'">
				SELECT
					R_REC_DATE
					<if test="bgCodeL != null">
					,	R_BG_NAME
					</if>
					<if test="mgCodeL != null">
					,	R_MG_NAME
					</if>
					<if test="sgCodeL != null">
					,	R_SG_NAME
					</if>
					,	COUNT(*) AS TOTAL_CALLS
					,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
					,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
					,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
					,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
					,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
					,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME_CONNECT),0)) AS REAL_CALL_TIME
			FROM RS_RECFILE
				<if test="bgCodeL != null">
				LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
				</if>
				<if test="mgCodeL != null">
				LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
				</if>
				<if test="sgCodeL != null">
				LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
				</if>
				, INLINE
				WHERE
					R_REC_DATE BETWEEN #{sDate} AND #{eDate}
					AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
					AND RS_RECFILE.R_USER_ID IS NOT NULL
					AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
				GROUP BY R_REC_DATE
						<if test="bgCodeL != null">
						, 	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						, 	R_SG_NAME
						</if>
				ORDER BY R_REC_DATE
			</when>
			<otherwise>
				SELECT
					TMP_TIME as R_REC_RTIME,
					<if test="bgCodeL != null">
					a.R_BG_NAME,
					</if>
					<if test="mgCodeL != null">
					a.R_MG_NAME,
					</if>
					<if test="sgCodeL != null">
					a.R_SG_NAME,
					</if>
					coalesce(TO_CHAR(TOTAL_CALLS),'0') as TOTAL_CALLS,coalesce(TO_CHAR(TOTAL_TIME),'0') as TOTAL_TIME,
					coalesce(TO_CHAR(INBOUND_CALLS),'0') as INBOUND_CALLS,coalesce(TO_CHAR(INBOUND_TIME),'0') as INBOUND_TIME,
					coalesce(TO_CHAR(OUTBOUND_CALLS),'0') as OUTBOUND_CALLS,coalesce(TO_CHAR(OUTBOUND_TIME),'0') as OUTBOUND_TIME,
					coalesce(TO_CHAR(TRANSFER_CALLS),'0') as TRANSFER_CALLS,coalesce(TO_CHAR(TRANSFER_TIME),'0') as TRANSFER_TIME,
					coalesce(TO_CHAR(CONFERENCE_CALLS),'0') as CONFERENCE_CALLS,coalesce(TO_CHAR(CONFERENCE_TIME),'0') as CONFERENCE_TIME,
					coalesce(TO_CHAR(INTERNAL_CALLS),'0') as INTERNAL_CALLS,coalesce(TO_CHAR(INTERNAL_TIME),'0') as INTERNAL_TIME,
					coalesce(TO_CHAR(REAL_CALLS),'0') as REAL_CALLS,coalesce(TO_CHAR(REAL_CALL_TIME),'0') as REAL_CALL_TIME
				FROM(
				(
					SELECT
						R_REC_RTIME
						<if test="bgCodeL != null">
						,	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						,	R_SG_NAME
						</if>
							,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME_CONNECT),0)) AS REAL_CALL_TIME

					FROM RS_RECFILE
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
					, INLINE
					WHERE
						R_REC_DATE BETWEEN #{sDate} AND #{eDate}
						AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
						AND RS_RECFILE.R_USER_ID IS NOT NULL
						AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
						<if test="vSysCode != null">
						AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
						</if>
					GROUP BY R_REC_RTIME
							 <if test="bgCodeL != null">
								, 	R_BG_NAME
							 </if>
							 <if test="mgCodeL != null">
								,	R_MG_NAME
							 </if>
							 <if test="sgCodeL != null">
								, 	R_SG_NAME
							 </if>) a
					RIGHT OUTER JOIN TEMP_TIME ON R_REC_RTIME=TMP_TIME
				)
				<if test="init == 'true'">
				where 1=0
				</if>
				ORDER BY R_REC_RTIME
			</otherwise>
		</choose>
	</select>
	<select id="dashboard7DayStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH DAY_TABLE AS (
			SELECT
				REPLACE( CAST( (DATE_TRUNC('day', CURRENT_DATE)::date -6 + i) AS VARCHAR), '-', '') AS DAILY_DATE
			FROM GENERATE_SERIES(0, 6) AS t(i)
		),INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)

		SELECT
				A.DAILY_DATE AS R_REC_DATE
			,	COUNT(*) AS TOTAL_CALLS
			,	SUM(COALESCE(R_CALL_TTIME::INTEGER,0)) AS TOTAL_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
			,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
			,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME


		FROM DAY_TABLE AS A LEFT JOIN (SELECT * FROM RS_RECFILE WHERE R_REC_DATE BETWEEN TO_CHAR(CURRENT_DATE-6,'YYYYMMDD') AND TO_CHAR(CURRENT_DATE,'YYYYMMDD') AND R_USER_ID IS NOT NULL
			AND R_BG_CODE IS NOT NULL)AS B
		ON A.DAILY_DATE = B.R_REC_DATE, INLINE

		WHERE
			(B.R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
		OR  B.R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		GROUP BY A.DAILY_DATE
		ORDER BY A.DAILY_DATE
	</select>

	<select id="dashboard7DayStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="sqlserver" resultMap="BaseResultMap">
		WITH DAY_TABLE AS (

				select CONVERT(VARCHAR(8),(GETDATE()- 0),112) AS DAILY_DATE
				union
				select CONVERT(VARCHAR(8),(GETDATE()- 1),112) AS DAILY_DATE
				union
				select CONVERT(VARCHAR(8),(GETDATE()- 2),112) AS DAILY_DATE
				union
				select CONVERT(VARCHAR(8),(GETDATE()- 3),112) AS DAILY_DATE
				union
				select CONVERT(VARCHAR(8),(GETDATE()- 4),112) AS DAILY_DATE
				union
				select CONVERT(VARCHAR(8),(GETDATE()- 5),112) AS DAILY_DATE
				union
				select CONVERT(VARCHAR(8),(GETDATE()- 6),112) AS DAILY_DATE
		),INLINE AS (
					SELECT convert(INTEGER,R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)

		SELECT
				A.DAILY_DATE AS R_REC_DATE
			,	COUNT(*) AS TOTAL_CALLS
			,	SUM(COALESCE(convert(integer,R_CALL_TTIME),0)) AS TOTAL_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
			,	SUM(CASE WHEN LEN(R_CUST_PHONE1) <![CDATA[<=]]> INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
			,	SUM(CASE WHEN LEN(R_CUST_PHONE1) <![CDATA[<=]]> INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME


		FROM DAY_TABLE AS A LEFT JOIN (SELECT * FROM RS_RECFILE WHERE R_REC_DATE BETWEEN CONVERT(VARCHAR(8),(GETDATE()- 6),112) AND CONVERT(VARCHAR(8),(GETDATE()),112) AND R_USER_ID IS NOT NULL
			AND R_BG_CODE IS NOT NULL)AS B
		ON A.DAILY_DATE = B.R_REC_DATE, INLINE

		WHERE
			(B.R_BUFFER1 IS NULL
			OR  B.R_BUFFER1 NOT LIKE '%##%' )
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		GROUP BY A.DAILY_DATE
		ORDER BY A.DAILY_DATE
	</select>
	
	<select id="dashboard7DayStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
		WITH DAY_TABLE AS (
			 SELECT REPLACE(TO_CHAR((CURRENT_DATE + ROWNUM -7),'yyyy/mm/dd'),'/','') AS DAILY_DATE
			 FROM ALL_OBJECTS
			 WHERE ROWNUM <![CDATA[<=]]> 7
		),INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)

		SELECT
				A.DAILY_DATE AS R_REC_DATE
			,	COUNT(*) AS TOTAL_CALLS
			,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
			,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
			,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME


		<!-- FROM DAY_TABLE A LEFT JOIN (SELECT * FROM RS_RECFILE WHERE R_REC_DATE BETWEEN TO_CHAR(CURRENT_DATE-6,'YYYYMMDD') AND TO_CHAR(CURRENT_DATE,'YYYYMMDD') AND R_USER_ID IS NOT NULL
			AND R_BG_CODE IS NOT NULL B
		ON A.DAILY_DATE = B.R_REC_DATE, INLINE -->
		FROM DAY_TABLE A LEFT JOIN (SELECT * FROM RS_RECFILE WHERE R_REC_DATE BETWEEN TO_DATE(TO_CHAR(CURRENT_DATE-6,'YYYYMMDD'),'yyyymmdd') AND TO_DATE(TO_CHAR(CURRENT_DATE,'YYYYMMDD'),'yyyymmdd') AND R_USER_ID is not null
			AND R_BG_CODE is not null) B
		ON A.DAILY_DATE = B.R_REC_DATE, INLINE

		WHERE
			(B.R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
		OR  B.R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		GROUP BY A.DAILY_DATE
		ORDER BY A.DAILY_DATE
	</select>
	
	<select id="dashboardDaily" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH INLINE AS (select (SELECT STRING_TO_ARRAY(R_CONFIG_VALUE,',') FROM RS_ETC_CONFIG WHERE R_CONFIG_KEY='EXCEPT_NUMBER' )AS EXCEPT_NUMBER , (select r_config_value from rs_etc_config where r_config_key='INLINE_LENGTH')::integer as INLINE_LENGTH)


		SELECT
			R_REC_RTIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN 1 ELSE 0 END) AS TOTAL_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TOTAL_TIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN 1 ELSE 0 END) AS INBOUND_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND LENGTH(R_CUST_PHONE1)  <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS


		FROM RS_RECFILE, INLINE
		WHERE
			R_REC_DATE = TO_CHAR(CURRENT_DATE, 'YYYYMMDD')

		AND(R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
		OR  R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		GROUP BY R_REC_RTIME
		ORDER BY R_REC_RTIME
	</select>
	<select id="dashboardDaily" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="sqlserver" resultMap="BaseResultMap">
		WITH INLINE AS (select (SELECT STRING_TO_ARRAY(R_CONFIG_VALUE,',') FROM RS_ETC_CONFIG WHERE R_CONFIG_KEY='EXCEPT_NUMBER' )AS EXCEPT_NUMBER , (select r_config_value from rs_etc_config where r_config_key='INLINE_LENGTH')::integer as INLINE_LENGTH)

		SELECT
			R_REC_RTIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN 1 ELSE 0 END) AS TOTAL_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TOTAL_TIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN 1 ELSE 0 END) AS INBOUND_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND LENGTH(R_CUST_PHONE1)  <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS


		FROM RS_RECFILE, INLINE
		WHERE
			R_REC_DATE = TO_CHAR(CURRENT_DATE, 'YYYYMMDD')

		AND(R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
		OR  R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		GROUP BY R_REC_RTIME
		ORDER BY R_REC_RTIME
	</select>
	
	<select id="dashboardDaily" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
		WITH INLINE AS (
		  select 
		    (SELECT LISTAGG(R_CONFIG_VALUE, ',') WITHIN GROUP (ORDER BY 1) FROM RS_ETC_CONFIG WHERE R_CONFIG_KEY='EXCEPT_NUMBER' )AS EXCEPT_NUMBER 
		    , TO_NUMBER((select r_config_value from rs_etc_config where r_config_key='INLINE_LENGTH')) as INLINE_LENGTH 
		  FROM DUAL
		)


		SELECT
			R_REC_RTIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0  THEN 1 ELSE 0 END) AS TOTAL_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0  THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TOTAL_TIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN 1 ELSE 0 END) AS INBOUND_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
			,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
			,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
			,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
			,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND LENGTH(R_CUST_PHONE1)  <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS


		FROM RS_RECFILE, INLINE
		WHERE
			R_REC_DATE = TO_CHAR(CURRENT_DATE, 'YYYYMMDD')

		AND(R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
		OR  R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		GROUP BY R_REC_RTIME
		ORDER BY R_REC_RTIME
	</select>

	<select id="dashboardSystem" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
				select 
					(SELECT STRING_TO_ARRAY(R_CONFIG_VALUE,',') FROM RS_ETC_CONFIG WHERE R_CONFIG_KEY='EXCEPT_NUMBER' )AS EXCEPT_NUMBER 
						, (select r_config_value from rs_etc_config where r_config_key='INLINE_LENGTH')::integer as INLINE_LENGTH
			)
			


			SELECT
				R_V_SYS_CODE
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN 1 ELSE 0 END) AS TOTAL_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TOTAL_TIME
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN 1 ELSE 0 END) AS INBOUND_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME

			FROM RS_RECFILE RECFILE, INLINE
			WHERE
				  R_REC_DATE = TO_CHAR(CURRENT_DATE, 'YYYYMMDD')
			  AND(R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
			   OR R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
			AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
			GROUP BY R_V_SYS_CODE
		)
		SELECT
			SYSINFO.R_SYS_ID AS R_V_SYS_CODE,
			CASE WHEN RECFILE.TOTAL_CALLS IS NULL THEN 0 ELSE RECFILE.TOTAL_CALLS END AS TOTAL_CALLS,
			CASE WHEN RECFILE.TOTAL_TIME IS NULL THEN 0 ELSE RECFILE.TOTAL_TIME END AS TOTAL_TIME,
			CASE WHEN RECFILE.INBOUND_CALLS IS NULL THEN 0 ELSE RECFILE.INBOUND_CALLS END AS INBOUND_CALLS,
			CASE WHEN RECFILE.INBOUND_TIME IS NULL THEN 0 ELSE RECFILE.INBOUND_TIME END AS INBOUND_TIME,
			CASE WHEN RECFILE.OUTBOUND_CALLS IS NULL THEN 0 ELSE RECFILE.OUTBOUND_CALLS END AS OUTBOUND_CALLS,
			CASE WHEN RECFILE.OUTBOUND_TIME IS NULL THEN 0 ELSE RECFILE.OUTBOUND_TIME END AS OUTBOUND_TIME
		FROM RS_SYS_INFO SYSINFO LEFT JOIN TMP_RECFILE RECFILE
		ON SYSINFO.R_SYS_ID = RECFILE.R_V_SYS_CODE
		ORDER BY SYSINFO.R_SYS_ID
	</select>
	<select id="dashboardSystem" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="sqlserver" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)


			SELECT
				R_V_SYS_CODE
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN 1 ELSE 0 END) AS TOTAL_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0  THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TOTAL_TIME
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN 1 ELSE 0 END) AS INBOUND_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where R_CUST_PHONE1= any(EXCEPT_NUMBER)))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME

			FROM RS_RECFILE RECFILE, INLINE
			WHERE
				  R_REC_DATE = TO_CHAR(CURRENT_DATE, 'YYYYMMDD')
			  AND(R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
			   OR R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
			AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
			GROUP BY R_V_SYS_CODE
		)
		SELECT
			SYSINFO.R_SYS_ID AS R_V_SYS_CODE,
			CASE WHEN RECFILE.TOTAL_CALLS IS NULL THEN 0 ELSE RECFILE.TOTAL_CALLS END AS TOTAL_CALLS,
			CASE WHEN RECFILE.TOTAL_TIME IS NULL THEN 0 ELSE RECFILE.TOTAL_TIME END AS TOTAL_TIME,
			CASE WHEN RECFILE.INBOUND_CALLS IS NULL THEN 0 ELSE RECFILE.INBOUND_CALLS END AS INBOUND_CALLS,
			CASE WHEN RECFILE.INBOUND_TIME IS NULL THEN 0 ELSE RECFILE.INBOUND_TIME END AS INBOUND_TIME,
			CASE WHEN RECFILE.OUTBOUND_CALLS IS NULL THEN 0 ELSE RECFILE.OUTBOUND_CALLS END AS OUTBOUND_CALLS,
			CASE WHEN RECFILE.OUTBOUND_TIME IS NULL THEN 0 ELSE RECFILE.OUTBOUND_TIME END AS OUTBOUND_TIME
		FROM RS_SYS_INFO SYSINFO LEFT JOIN TMP_RECFILE RECFILE
		ON SYSINFO.R_SYS_ID = RECFILE.R_V_SYS_CODE
		ORDER BY SYSINFO.R_SYS_ID
	</select>
	
	<select id="dashboardSystem" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
		WITH INLINE AS (
					select 
		    		(SELECT LISTAGG(R_CONFIG_VALUE, ',') WITHIN GROUP (ORDER BY 1) FROM RS_ETC_CONFIG WHERE R_CONFIG_KEY='EXCEPT_NUMBER' )AS EXCEPT_NUMBER 
		    		, TO_NUMBER((select r_config_value from rs_etc_config where r_config_key='INLINE_LENGTH')) as INLINE_LENGTH  FROM DUAL
		)
		, TMP_RECFILE AS (
			SELECT
				R_V_SYS_CODE
					,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0  THEN 1 ELSE 0 END) AS TOTAL_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0  THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TOTAL_TIME
					,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN 1 ELSE 0 END) AS INBOUND_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (((R_CALL_KIND1 != 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH))) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
					,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
					,	SUM(CASE WHEN ((select count(*) from INLINE where EXCEPT_NUMBER like '%'||R_CUST_PHONE1||'%'))=0 AND (R_CALL_KIND1 = 'O' AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH) THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME

			FROM RS_RECFILE RECFILE, INLINE
			WHERE
				  R_REC_DATE = TO_CHAR(CURRENT_DATE, 'YYYYMMDD')
			  AND(R_BUFFER1 IS NULL				<!-- 주공 선택녹취 처리 조건 -->
			   OR R_BUFFER1 NOT LIKE '%##%' )		<!-- NOT LIKE '%##%' 으로 빈값 검출 못하여 IS NULL 에 OR 추가	 -->
			AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
			GROUP BY R_V_SYS_CODE
		)
		SELECT
			SYSINFO.R_SYS_ID AS R_V_SYS_CODE,
			CASE WHEN RECFILE.TOTAL_CALLS IS NULL THEN 0 ELSE RECFILE.TOTAL_CALLS END AS TOTAL_CALLS,
			CASE WHEN RECFILE.TOTAL_TIME IS NULL THEN 0 ELSE RECFILE.TOTAL_TIME END AS TOTAL_TIME,
			CASE WHEN RECFILE.INBOUND_CALLS IS NULL THEN 0 ELSE RECFILE.INBOUND_CALLS END AS INBOUND_CALLS,
			CASE WHEN RECFILE.INBOUND_TIME IS NULL THEN 0 ELSE RECFILE.INBOUND_TIME END AS INBOUND_TIME,
			CASE WHEN RECFILE.OUTBOUND_CALLS IS NULL THEN 0 ELSE RECFILE.OUTBOUND_CALLS END AS OUTBOUND_CALLS,
			CASE WHEN RECFILE.OUTBOUND_TIME IS NULL THEN 0 ELSE RECFILE.OUTBOUND_TIME END AS OUTBOUND_TIME
		FROM RS_SYS_INFO SYSINFO LEFT JOIN TMP_RECFILE RECFILE
		ON SYSINFO.R_SYS_ID = RECFILE.R_V_SYS_CODE
		ORDER BY SYSINFO.R_SYS_ID
	</select>
	
	
	<select id="selectUserStatistics" databaseId="postgres" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			SELECT
				r_user_id
				<if test="dayTimeBy=='timeBy'">
				,	R_REC_RTIME
				</if>
			    <if test="dayTimeBy=='monthBy'">
				, to_char(date_trunc('month', r_rec_date::date ),'YYYYMMDD') AS tmp_date
				</if>
			    <if test="dayTimeBy=='dayWeekBy'">
				, extract(isodow from r_rec_date::date) AS dayOfWeek
				</if>
			    <if test="dayTimeBy=='weekBy'">
				, to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD') AS tmp_week
				</if>
				,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(R_CALL_TTIME :: INTEGER,0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' AND R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN COALESCE(R_CALL_TTIME_CONNECT::INTEGER,0) else 0 end) AS REAL_CALL_TIME
				<if test="dayTimeBy!='timeBy'">
				, min(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)) as min_call_time
				,max(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER))as max_call_time
				,round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				</if>
				FROM RS_RECFILE
				<if test='authBeforeGroup != "Y"'>
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
				</if>
				, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND RS_RECFILE.R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND RS_RECFILE.R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND RS_RECFILE.R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY RS_RECFILE.r_user_id
			    <if test="dayTimeBy=='timeBy'">
				, R_REC_RTIME
				</if>
			    <if test="dayTimeBy=='monthBy'">
				, to_char(date_trunc('month', r_rec_date::date ),'YYYYMMDD')
				</if>
			    <if test="dayTimeBy=='dayWeekBy'">
				, extract(isodow from r_rec_date::date) 
				</if>
			    <if test="dayTimeBy=='weekBy'">
				, to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD')
				</if>
		)
			    <if test="dayTimeBy=='dayWeekBy'">
          		, temp_date AS ( select generate_series('1','7',1)::text AS tmp_date) 
				</if>
			    <if test="dayTimeBy=='monthBy'">
          		,  temp_date AS (
          				select DISTINCT to_char(date_trunc('month', dateValue::timestamp),'YYYYMMDD')::text as r_rec_date
		          		from (
		          			select replace((a.date + b.idx)::text,'-','') as dateValue 
		          			from  (select #{sDate}::date as date ) a cross join ( select generate_series(0, ((select #{eDate}::date- #{sDate} ::date))) as idx) b) temp_date
		         			group by r_rec_date
         					order by r_rec_date
         				) 
				</if>
			    <if test="dayTimeBy=='weekBy'">
          		,  temp_date AS (
          				select DISTINCT to_char(date_trunc('week', dateValue::timestamp),'YYYYMMDD')::text as r_rec_date
		          		from (
		          			select replace((a.date + b.idx)::text,'-','') as dateValue 
		          			from  (select #{sDate}::date as date ) a cross join ( select generate_series(0, ((select #{eDate}::date- #{sDate}::date))) as idx) b) temp_date
		         			group by r_rec_date
         					order by r_rec_date
         				) 
				</if>
				<if test="dayTimeBy=='timeBy'">
				,TEMP_TIME AS ( select lpad(generate_series('8','22',1)::text,2,'0') as tmp_time)
				</if>
		SELECT
			<if test="dayTimeBy=='timeBy'">
			TMP_TIME as R_REC_RTIME,
			</if>
			<if test="dayTimeBy=='monthBy'">
			r_rec_date,
			</if>
			<if test="dayTimeBy=='dayWeekBy'">
			tmp_date,
			</if>
			<if test="dayTimeBy=='weekBy'">
			r_rec_date,
			</if>
			USER_INFO.R_USER_ID,
			R_USER_NAME,
			R_EXT_NO,
			R_BG_CODE,
			R_MG_CODE,
			R_SG_CODE,
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(INBOUND_CALLS, 0) AS INBOUND_CALLS,
			COALESCE(INBOUND_TIME, 0) AS INBOUND_TIME,
			COALESCE(OUTBOUND_CALLS, 0) AS OUTBOUND_CALLS,
			COALESCE(OUTBOUND_TIME, 0) AS OUTBOUND_TIME,
			COALESCE(TRANSFER_CALLS, 0) AS TRANSFER_CALLS,
			COALESCE(TRANSFER_TIME, 0) AS TRANSFER_TIME,
			COALESCE(CONFERENCE_CALLS, 0) AS CONFERENCE_CALLS,
			COALESCE(CONFERENCE_TIME, 0) AS CONFERENCE_TIME,
			COALESCE(INTERNAL_CALLS, 0) AS INTERNAL_CALLS,
			COALESCE(INTERNAL_TIME, 0) AS INTERNAL_TIME,
			COALESCE(REAL_CALLS, 0) AS REAL_CALLS,
			COALESCE(REAL_CALL_TIME, 0) AS REAL_CALL_TIME

			<if test="dayTimeBy!='timeBy'">
			, min_call_time, max_call_time, avg_call_time
			</if>
		FROM
		<if test="dayTimeBy=='timeBy'">
		TEMP_TIME
		left join
		</if>
		<if test="dayTimeBy=='monthBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>		
		<if test="dayTimeBy=='dayWeekBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>
		<if test="dayTimeBy=='weekBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID NOT IN ('manager') and R_USE_YN='Y'
					AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL
					AND R_BG_CODE !='BGIVR'
					<!-- AND     COALESCE(R_EXT_NO, '') IS NOT NULL -->
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				AND R_BG_CODE !='BGIVR'
		) AS USER_INFO

		<if test="dayTimeBy=='timeBy' or dayTimeBy=='monthBy' or dayTimeBy=='dayWeekBy' or dayTimeBy=='weekBy'">
		on 1=1
		</if>
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON USER_INFO.r_user_id = RECFILE.r_user_id
		<if test="dayTimeBy=='timeBy'">
		and tmp_time =  r_rec_rtime
		</if>
		<if test="dayTimeBy=='monthBy'">
		AND r_rec_date = tmp_date
		</if>
		<if test="dayTimeBy=='dayWeekBy'">
		and tmp_date = dayofweek::text
		</if>
		<if test="dayTimeBy=='weekBy'">
		AND r_rec_date = tmp_week
		</if>
		ORDER BY
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
				</when>
				<otherwise>
					R_USER_ID
					<if test="dayTimeBy=='timeBy'">
						,R_REC_RTIME
					</if>
					<if test="dayTimeBy=='dayWeekBy'">
						,tmp_date
					</if>
					<if test="dayTimeBy=='weekBy'">
						,r_rec_date
					</if>
					<if test="dayTimeBy=='monthBy'">
						,r_rec_date
					</if>
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
				,	R_USER_NAME
				</otherwise>
			</choose>

			<choose>
					<when test="count != null and posStart != null">
						LIMIT #{count} OFFSET #{posStart}
					</when>
					<when test="count ==1">
					</when>
					<otherwise>
					<if test="dayTimeBy!='timeBy'">
						LIMIT 20 OFFSET 0
					</if>
					<if test="dayTimeBy=='timeBy'">
						LIMIT 150 OFFSET 0
					</if>
					</otherwise>
			</choose>
	</select>
	<select id="selectUserStatistics" databaseId="sqlserver" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT convert(integer,R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
		,TMP_RECFILE AS (

			SELECT
				r_user_id
				<if test="dayTimeBy=='timeBy'">
				,	R_REC_RTIME
				</if>
				,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(convert(integer,R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' AND R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN COALESCE(convert(integer,R_CALL_TTIME_CONNECT),0) else 0 end) AS REAL_CALL_TIME
				<if test="dayTimeBy!='timeBy'">
				, min(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)) as min_call_time
				,max(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER))as max_call_time
				,round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				</if>
				FROM RS_RECFILE, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY RS_RECFILE.r_user_id
			    <if test="dayTimeBy=='timeBy'">
				, R_REC_RTIME
				</if>
		)
	<if test="dayTimeBy=='timeBy'">
	,TEMP_TIME as(
		SELECT convert(varchar(2),g.IntValue) AS TMP_TIME         FROM generate_series(8 , 22, 1 ) g
	)
	</if>
	 SELECT  * FROM ( SELECT ROW_NUMBER() OVER( order by 
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
				</when>
				<otherwise>
					R_USER_ID
					<if test="dayTimeBy=='timeBy'">
						,R_REC_RTIME
					</if>
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
				,	R_USER_NAME
				</otherwise>
			</choose>
			) AS ROWNUMBER,
	 		* FROM (
		SELECT
			<if test="dayTimeBy=='timeBy'">
			TMP_TIME as R_REC_RTIME,
			</if>
			USER_INFO.R_USER_ID,
			R_USER_NAME,
			R_EXT_NO,
			R_BG_CODE,
			R_MG_CODE,
			R_SG_CODE,
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(INBOUND_CALLS, 0) AS INBOUND_CALLS,
			COALESCE(INBOUND_TIME, 0) AS INBOUND_TIME,
			COALESCE(OUTBOUND_CALLS, 0) AS OUTBOUND_CALLS,
			COALESCE(OUTBOUND_TIME, 0) AS OUTBOUND_TIME,
			COALESCE(TRANSFER_CALLS, 0) AS TRANSFER_CALLS,
			COALESCE(TRANSFER_TIME, 0) AS TRANSFER_TIME,
			COALESCE(CONFERENCE_CALLS, 0) AS CONFERENCE_CALLS,
			COALESCE(CONFERENCE_TIME, 0) AS CONFERENCE_TIME,
			COALESCE(INTERNAL_CALLS, 0) AS INTERNAL_CALLS,
			COALESCE(INTERNAL_TIME, 0) AS INTERNAL_TIME,
			COALESCE(REAL_CALLS, 0) AS REAL_CALLS,
			COALESCE(REAL_CALL_TIME, 0) AS REAL_CALL_TIME

			<if test="dayTimeBy!='timeBy'">
			, min_call_time, max_call_time, avg_call_time
			</if>
		FROM
		<if test="dayTimeBy=='timeBy'">
		TEMP_TIME
		left join
		</if>
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID NOT IN ('manager') and R_USE_YN='Y'
					AND COALESCE(LTRIM(RTRIM(R_EXT_NO)),'')IS NOT NULL
					AND R_BG_CODE !='BGIVR'
					<!-- AND     COALESCE(R_EXT_NO, '') IS NOT NULL -->
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				AND R_BG_CODE !='BGIVR'
		) AS USER_INFO

		<if test="dayTimeBy=='timeBy'">
		on 1=1
		</if>
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON USER_INFO.r_user_id = RECFILE.r_user_id
		<if test="dayTimeBy=='timeBy'">
		and tmp_time =  r_rec_rtime
		</if>

		)T )A
		WHERE


			<choose>
					<when test="count != null and posStart != null">
					 ROWNUMBER <![CDATA[>]]> #{posStart} and ROWNUMBER<![CDATA[<=]]>  convert(integer,#{posStart}+#{count})
					</when>
					<otherwise>
					<if test="dayTimeBy!='timeBy'">

						 ROWNUMBER<![CDATA[<=]]> 20
					</if>
					<if test="dayTimeBy=='timeBy'">
						ROWNUMBER<![CDATA[<=]]> 150
					</if>
					</otherwise>
			</choose>
	</select>
	
	<select id="selectUserStatistics" databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
		,TMP_RECFILE AS (

			SELECT
				r_user_id
				<if test="dayTimeBy=='timeBy'">
				,	R_REC_RTIME
				</if>
				,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' AND R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN COALESCE(TO_NUMBER(R_CALL_TTIME_CONNECT),0) else 0 end) AS REAL_CALL_TIME
				<if test="dayTimeBy!='timeBy'">
				, min(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)) as min_call_time
				,max(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER))as max_call_time
				,round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				</if>
				FROM RS_RECFILE, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
				
				GROUP BY RS_RECFILE.r_user_id
			    <if test="dayTimeBy=='timeBy'">
				, R_REC_RTIME
				</if>
		)
	<if test="dayTimeBy=='timeBy'">
	,TEMP_TIME as(
		SELECT 7 + LEVEL AS TMP_TIME FROM DUAL
         		 	CONNECT BY LEVEL <![CDATA[<]]> 16
	)
	</if>
	 SELECT  * FROM ( SELECT ROW_NUMBER() OVER( order by
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
				</when>
				<otherwise>
					R_EXT_NO DESC
				,	R_USER_ID
					<if test="dayTimeBy=='timeBy'">
						,R_REC_RTIME
					</if>
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
				,	R_USER_NAME
				</otherwise>
			</choose>
			) AS ROWNUMBER,
	 		T.* FROM (
		SELECT
			<if test="dayTimeBy=='timeBy'">
			TMP_TIME as R_REC_RTIME,
			</if>
			USER_INFO.R_USER_ID,
			R_USER_NAME,
			R_EXT_NO,
			R_BG_CODE,
			R_MG_CODE,
			R_SG_CODE,
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(INBOUND_CALLS, 0) AS INBOUND_CALLS,
			COALESCE(INBOUND_TIME, 0) AS INBOUND_TIME,
			COALESCE(OUTBOUND_CALLS, 0) AS OUTBOUND_CALLS,
			COALESCE(OUTBOUND_TIME, 0) AS OUTBOUND_TIME,
			COALESCE(TRANSFER_CALLS, 0) AS TRANSFER_CALLS,
			COALESCE(TRANSFER_TIME, 0) AS TRANSFER_TIME,
			COALESCE(CONFERENCE_CALLS, 0) AS CONFERENCE_CALLS,
			COALESCE(CONFERENCE_TIME, 0) AS CONFERENCE_TIME,
			COALESCE(INTERNAL_CALLS, 0) AS INTERNAL_CALLS,
			COALESCE(INTERNAL_TIME, 0) AS INTERNAL_TIME,
			COALESCE(REAL_CALLS, 0) AS REAL_CALLS,
			COALESCE(REAL_CALL_TIME, 0) AS REAL_CALL_TIME

			<if test="dayTimeBy!='timeBy'">
			, min_call_time, max_call_time, avg_call_time
			</if>
		FROM
		<if test="dayTimeBy=='timeBy'">
		TEMP_TIME
		left join
		</if>
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID NOT IN ('manager') and R_USE_YN='Y'
					AND COALESCE(LTRIM(RTRIM(R_EXT_NO)),'')IS NOT NULL
					AND R_BG_CODE !='BGIVR'
					<!-- AND     COALESCE(R_EXT_NO, '') IS NOT NULL -->
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				AND R_BG_CODE !='BGIVR'
		) USER_INFO

		<if test="dayTimeBy=='timeBy'">
		on 1=1
		</if>
		LEFT JOIN TMP_RECFILE RECFILE
		ON USER_INFO.r_user_id = RECFILE.r_user_id
		<if test="dayTimeBy=='timeBy'">
		and tmp_time =  r_rec_rtime
		</if>

		)T )A
		WHERE


			<choose>
					<when test="count != null and posStart != null">
					 ROWNUMBER <![CDATA[>]]> #{posStart} and ROWNUMBER<![CDATA[<=]]>  TO_NUMBER(#{posStart}+#{count})
					</when>
					<otherwise>
					<if test="dayTimeBy!='timeBy'">

						 ROWNUMBER<![CDATA[<=]]> 20
					</if>
					<if test="dayTimeBy=='timeBy'">
						ROWNUMBER<![CDATA[<=]]> 150
					</if>
					</otherwise>
			</choose>
	</select>

	<select id="selectUserTotalStatistics" databaseId="postgres"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
			WITH TMP_RECFILE AS (
			WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			SELECT
				r_user_id
				<if test="dayTimeBy=='timeBy'">
				,	R_REC_RTIME
				</if>
			    <if test="dayTimeBy=='monthBy'">
				, to_char(date_trunc('month', r_rec_date::date ),'YYYYMMDD') AS tmp_date
				</if>
			    <if test="dayTimeBy=='dayWeekBy'">
				, extract(isodow from r_rec_date::date) AS dayOfWeek
				</if>
			    <if test="dayTimeBy=='weekBy'">
				, to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD') AS tmp_week
				</if>
				,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(R_CALL_TTIME :: INTEGER,0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' AND R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN COALESCE(R_CALL_TTIME_CONNECT::INTEGER,0) else 0 end) AS REAL_CALL_TIME
				<if test="dayTimeBy!='timeBy'">
				, min(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)) as min_call_time
				,max(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER))as max_call_time
				,round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				</if>
				FROM RS_RECFILE
				<if test='authBeforeGroup != "Y"'>
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
				</if>
				, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND RS_RECFILE.R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND RS_RECFILE.R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND RS_RECFILE.R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY RS_RECFILE.r_user_id
			    <if test="dayTimeBy=='timeBy'">
				, R_REC_RTIME
				</if>
			    <if test="dayTimeBy=='monthBy'">
				, to_char(date_trunc('month', r_rec_date::date ),'YYYYMMDD')
				</if>
			    <if test="dayTimeBy=='dayWeekBy'">
				, extract(isodow from r_rec_date::date) 
				</if>
			    <if test="dayTimeBy=='weekBy'">
				, to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD')
				</if>
		)
			    <if test="dayTimeBy=='dayWeekBy'">
          		, temp_date AS ( select generate_series('1','7',1)::text AS tmp_date) 
				</if>
			    <if test="dayTimeBy=='monthBy'">
          		,  temp_date AS (
          				select DISTINCT to_char(date_trunc('month', dateValue::timestamp),'YYYYMMDD')::text as r_rec_date
		          		from (
		          			select replace((a.date + b.idx)::text,'-','') as dateValue 
		          			from  (select #{sDate}::date as date ) a cross join ( select generate_series(0, ((select #{eDate}::date- #{sDate} ::date))) as idx) b) temp_date
		         			group by r_rec_date
         					order by r_rec_date
         				) 
				</if>
			    <if test="dayTimeBy=='weekBy'">
          		,  temp_date AS (
          				select DISTINCT to_char(date_trunc('week', dateValue::timestamp),'YYYYMMDD')::text as r_rec_date
		          		from (
		          			select replace((a.date + b.idx)::text,'-','') as dateValue 
		          			from  (select #{sDate}::date as date ) a cross join ( select generate_series(0, ((select #{eDate}::date- #{sDate}::date))) as idx) b) temp_date
		         			group by r_rec_date
         					order by r_rec_date
         				) 
				</if>
				<if test="dayTimeBy=='timeBy'">
				,TEMP_TIME AS ( select lpad(generate_series('8','22',1)::text,2,'0') as tmp_time)
				</if>
		SELECT
			<!-- <if test="dayTimeBy=='timeBy'">
			TMP_TIME as R_REC_RTIME,
			</if>
			<if test="dayTimeBy=='monthBy'">
			r_rec_date,
			</if>
			<if test="dayTimeBy=='dayWeekBy'">
			tmp_date,
			</if>
			<if test="dayTimeBy=='weekBy'">
			r_rec_date,
			</if> -->
			  SUM(COALESCE(TOTAL_CALLS,0)) AS TOTAL_CALLS, 
			  SUM(COALESCE(TOTAL_TIME,0)) AS TOTAL_TIME, 
			  SUM(COALESCE(INBOUND_CALLS,0)) AS INBOUND_CALLS, 
			  SUM(COALESCE(INBOUND_TIME,0)) AS INBOUND_TIME, 
			  SUM(COALESCE(OUTBOUND_CALLS,0)) AS OUTBOUND_CALLS, 
			  SUM(COALESCE(OUTBOUND_TIME,0)) AS OUTBOUND_TIME, 
			  SUM(COALESCE(TRANSFER_CALLS,0)) AS TRANSFER_CALLS, 
			  SUM(COALESCE(TRANSFER_TIME,0)) AS TRANSFER_TIME, 
			  SUM(COALESCE(CONFERENCE_CALLS,0)) AS CONFERENCE_CALLS, 
			  SUM(COALESCE(CONFERENCE_TIME,0)) AS CONFERENCE_TIME, 
			  SUM(COALESCE(INTERNAL_CALLS,0)) AS INTERNAL_CALLS, 
			  SUM(COALESCE(INTERNAL_TIME,0)) AS INTERNAL_TIME, 
			  SUM(COALESCE(REAL_CALLS,0)) AS REAL_CALLS, 
			  SUM(COALESCE(REAL_CALL_TIME,0)) AS REAL_CALL_TIME 
		FROM
		<if test="dayTimeBy=='timeBy'">
		TEMP_TIME
		left join
		</if>
		<if test="dayTimeBy=='monthBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>		
		<if test="dayTimeBy=='dayWeekBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>
		<if test="dayTimeBy=='weekBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID NOT IN ('manager') and R_USE_YN='Y'
					AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL
					AND R_BG_CODE !='BGIVR'
					<!-- AND     COALESCE(R_EXT_NO, '') IS NOT NULL -->
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				AND R_BG_CODE !='BGIVR'
		) AS USER_INFO

		<if test="dayTimeBy=='timeBy' or dayTimeBy=='monthBy' or dayTimeBy=='dayWeekBy' or dayTimeBy=='weekBy'">
		on 1=1
		</if>
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON USER_INFO.r_user_id = RECFILE.r_user_id
		<if test="dayTimeBy=='timeBy'">
		and tmp_time =  r_rec_rtime
		</if>
		<if test="dayTimeBy=='monthBy'">
		AND r_rec_date = tmp_date
		</if>
		<if test="dayTimeBy=='dayWeekBy'">
		and tmp_date = dayofweek::text
		</if>
		<if test="dayTimeBy=='weekBy'">
		AND r_rec_date = tmp_week
		</if>
	</select>
	<select id="selectUserTotalStatistics" databaseId="sqlserver" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
			WITH INLINE AS (
							SELECT convert(integer,R_CONFIG_VALUE) AS INLINE_LENGTH
								FROM RS_ETC_CONFIG
								WHERE R_CONFIG_KEY='INLINE_LENGTH'
							)
			<choose>
				<when test="dayTimeBy=='timeBy' or dayTimeBy=='dateBy' or dayTimeBy=='dayWeekBy' or dayTimeBy=='weekBy' or dayTimeBy=='monthBy'">
					SELECT
							COUNT(*) AS TOTAL_CALLS
						,	SUM(COALESCE(convert(integer,R_CALL_TTIME),0)) AS TOTAL_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
						,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
						,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
						,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' AND R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS REAL_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN COALESCE(convert(integer,R_CALL_TTIME_CONNECT),0) else 0 end) AS REAL_CALL_TIME
						FROM RS_RECFILE, INLINE
					WHERE
						R_REC_DATE BETWEEN #{sDate} AND #{eDate}
						AND RS_RECFILE.R_USER_ID IS NOT NULL
						AND RS_RECFILE.R_BG_CODE IS NOT NULL
						AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
						AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
						<if test="bgCodeL !=null and bgCodeL.size!=0">
							AND R_BG_CODE IN
							<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="mgCodeL !=null and mgCodeL.size!=0">
							AND R_MG_CODE IN
							<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="sgCodeL !=null and sgCodeL.size!=0">
							AND R_SG_CODE IN
							<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="userIdL !=null and userIdL.size!=0">
							AND RS_RECFILE.R_USER_ID in
							<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="vSysCode != null">
							AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
						</if>
				</when>
				<otherwise>
					SELECT
						<choose>
								<when test="dayTimeBy=='callTimeByRealOutbound'">
									count(*) FILTER (where r_call_stime_connect != '0') "total",
									SUM(CASE WHEN convert(integer, r_call_ttime_connect) <![CDATA[<]]>30 and r_call_stime_connect !='0' THEN 1 ELSE 0 END)  "sec30",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >=30 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >=60 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >=120 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >=180 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >=240 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >=300 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >=420 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
									SUM(CASE WHEN convert(integer,r_call_ttime_connect) >= 600 THEN 1 ELSE 0 END) "moresec600"
								</when>
								<otherwise>
									count(*) "total",
									SUM(CASE WHEN R_CALL_TTIME::INTEGER <![CDATA[<]]>30 THEN 1 ELSE 0 END)  "sec30",
									SUM(CASE WHEN convert(integer,R_CALL_TTIME) >=30 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
									SUM(CASE WHEN convert(integer,R_CALL_TTIME) >=60 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
									SUM(CASE WHEN convert(integer,R_CALL_TTIME) >=120 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
									SUM(CASE WHEN convert(integer,R_CALL_TTIME) >=180 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
									SUM(CASE WHEN convert(integer,R_CALL_TTIME) >=240 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
									SUM(CASE WHEN convert(integer,R_CALL_TTIMe) >=300 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
									SUM(CASE WHEN convert(integer,R_CALL_TTIME) >=420 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
									SUM(CASE WHEN convert(integer,R_CALL_TTIME) >= 600 THEN 1 ELSE 0 END) "moresec600"
								</otherwise>
							</choose>
					FROM RS_RECFILE, INLINE
					WHERE R_REC_DATE BETWEEN #{sDate} AND #{eDate}
					AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
					AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
					AND LEN(R_CUST_PHONE1) > INLINE_LENGTH
					AND RS_RECFILE.R_USER_ID in (select r_user_id from RS_RUSER_INFO where R_USE_YN='Y'
												AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL )
					AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="dayTimeBy=='callTimeByInbound'">
						AND R_CALL_KIND1 != 'O'
					</if>
					<if test="dayTimeBy=='callTimeByOutbound' or dayTimeBy=='callTimeByRealOutbound'">
						AND R_CALL_KIND1 = 'O'
					</if>
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						AND R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						AND R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						AND R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
						AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
				</otherwise>
			</choose>
	</select>
	
	<select id="selectUserTotalStatistics" databaseId="oracle"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
			WITH INLINE AS (
							SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
								FROM RS_ETC_CONFIG
								WHERE R_CONFIG_KEY='INLINE_LENGTH'
							)
			<choose>
				<when test="dayTimeBy=='timeBy' or dayTimeBy=='dateBy' or dayTimeBy=='dayWeekBy' or dayTimeBy=='weekBy' or dayTimeBy=='monthBy'">
					SELECT
							COUNT(*) AS TOTAL_CALLS
						,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
						,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
						,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
						,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
						,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' AND R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS REAL_CALLS
						,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN COALESCE(TO_NUMBER(R_CALL_TTIME_CONNECT),0) else 0 end) AS REAL_CALL_TIME
						FROM RS_RECFILE, INLINE
					WHERE
						R_REC_DATE BETWEEN #{sDate} AND #{eDate}
						AND RS_RECFILE.R_USER_ID IS NOT NULL
						AND RS_RECFILE.R_BG_CODE IS NOT NULL
						AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
						<if test="bgCodeL !=null and bgCodeL.size!=0">
							AND R_BG_CODE IN
							<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="mgCodeL !=null and mgCodeL.size!=0">
							AND R_MG_CODE IN
							<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="sgCodeL !=null and sgCodeL.size!=0">
							AND R_SG_CODE IN
							<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="userIdL !=null and userIdL.size!=0">
							AND RS_RECFILE.R_USER_ID in
							<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if>
						<if test="vSysCode != null">
							AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
						</if>
				</when>
				<otherwise>
					SELECT
						<choose>
								<when test="dayTimeBy=='callTimeByRealOutbound'">
									<!-- count(*) FILTER (where r_call_stime_connect != '0') "total", -->
									count(CASE WHEN r_call_stime_connect != '0' THEN 1 END) "total",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>30 and r_call_stime_connect !='0' THEN 1 ELSE 0 END)  "sec30",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=30 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=60 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=120 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=180 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=240 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=300 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=420 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
									SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >= 600 THEN 1 ELSE 0 END) "moresec600"
								</when>
								<otherwise>
									count(*) "total",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>30 THEN 1 ELSE 0 END)  "sec30",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=30 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=60 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=120 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=180 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=240 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=300 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=420 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
									SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >= 600 THEN 1 ELSE 0 END) "moresec600"
								</otherwise>
							</choose>
					FROM RS_RECFILE, INLINE
					WHERE R_REC_DATE BETWEEN #{sDate} AND #{eDate}
					AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
					AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH
					AND RS_RECFILE.R_USER_ID in (select r_user_id from RS_RUSER_INFO where R_USE_YN='Y'
												AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL )
					AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="dayTimeBy=='callTimeByInbound'">
						AND R_CALL_KIND1 != 'O'
					</if>
					<if test="dayTimeBy=='callTimeByOutbound' or dayTimeBy=='callTimeByRealOutbound'">
						AND R_CALL_KIND1 = 'O'
					</if>
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						AND R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						AND R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						AND R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
						AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
				</otherwise>
			</choose>
	</select>

	<select id="totalSelectUserStatistics" databaseId="postgres" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultType="Integer">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'

			)
			SELECT
				r_user_id
				<if test="dayTimeBy=='timeBy'">
				,	R_REC_RTIME
				</if>
			    <if test="dayTimeBy=='monthBy'">
				, To_char(Date_trunc('month', r_rec_date::date ),'YYYYMMDD') AS tmp_date
				</if>
			    <if test="dayTimeBy=='dayWeekBy'">
				, extract(isodow from r_rec_date::date) AS dayOfWeek
				</if>
			    <if test="dayTimeBy=='weekBy'">
				, To_char(Date_trunc('week', r_rec_date::date ),'YYYYMMDD') AS tmp_week
				</if>
				,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(R_CALL_TTIME::INTEGER,0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(COALESCE(R_CALL_TTIME_CONNECT::INTEGER,0)) AS REAL_CALL_TIME

				<if test="dayTimeBy!='timeBy'">
				, min(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)) as min_call_time
				,max(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER))as max_call_time
				,round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				</if>
				FROM RS_RECFILE
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
				, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND RS_RECFILE.R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND RS_RECFILE.R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND RS_RECFILE.R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
				GROUP BY RS_RECFILE.r_user_id
			     <if test="dayTimeBy=='timeBy'">
				, R_REC_RTIME
				</if>
			    <if test="dayTimeBy=='monthBy'">
				, to_char(date_trunc('month', r_rec_date::date ),'YYYYMMDD')
				</if>
			    <if test="dayTimeBy=='dayWeekBy'">
				, extract(isodow from r_rec_date::date) 
				</if>
			    <if test="dayTimeBy=='weekBy'">
				, to_char(date_trunc('week', r_rec_date::date ),'YYYYMMDD')
				</if>
		) 
		<if test="dayTimeBy=='dayWeekBy'">
       		, temp_date AS ( select generate_series('1','7',1)::text AS tmp_date) 
		</if>
	    <if test="dayTimeBy=='monthBy'">
        		,  temp_date AS (
        				select DISTINCT to_char(date_trunc('month', dateValue::timestamp),'YYYYMMDD')::text as r_rec_date
          		from (
          			select replace((a.date + b.idx)::text,'-','') as dateValue 
          			from  (select #{sDate}::date as date ) a cross join ( select generate_series(0, ((select #{eDate}::date- #{sDate}::date))) as idx) b) temp_date
         			group by r_rec_date
       				order by r_rec_date
       				) 
		</if>
	    <if test="dayTimeBy=='weekBy'">
        		,  temp_date AS (
        				select DISTINCT to_char(date_trunc('week', dateValue::timestamp),'YYYYMMDD')::text as r_rec_date
          		from (
          			select replace((a.date + b.idx)::text,'-','') as dateValue 
          			from  (select #{sDate}::date as date ) a cross join ( select generate_series(0, ((select #{eDate}::date- #{sDate}::date))) as idx) b) temp_date
         			group by r_rec_date
       				order by r_rec_date
       				) 
		</if>
		<!-- asd -->
	<if test="dayTimeBy=='timeBy'">
	,TEMP_TIME as(
		select lpad(generate_series('8','22',1)::text,2,'0') as tmp_time
	)
	</if>
		SELECT
			count(*)
		FROM
		<if test="dayTimeBy=='timeBy'">
		TEMP_TIME
		left join
		</if>
		<if test="dayTimeBy=='monthBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>
		<if test="dayTimeBy=='dayWeekBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>
		<if test="dayTimeBy=='weekBy'">
		TEMP_DATE 
		LEFT OUTER JOIN
		</if>
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>

					R_USER_ID NOT IN ('manager') and R_USE_YN='Y' AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL
					AND R_BG_CODE !='BGIVR'
					<!-- AND     COALESCE(R_EXT_NO, '') IS NOT NULL -->
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				AND R_BG_CODE !='BGIVR'
		) AS USER_INFO

		<if test="dayTimeBy=='timeBy' or dayTimeBy=='monthBy' or dayTimeBy=='dayWeekBy' or dayTimeBy=='weekBy'">
		on 1=1
		</if>
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON USER_INFO.r_user_id = RECFILE.r_user_id
		<if test="dayTimeBy=='timeBy'">
		and tmp_time =  r_rec_rtime
		</if>
		<if test="dayTimeBy=='monthBy'">
		AND r_rec_date = tmp_date
		</if>
		<if test="dayTimeBy=='dayWeekBy'">
		and tmp_date = dayofweek::text
		</if>
		<if test="dayTimeBy=='weekBy'">
		AND r_rec_date = tmp_week
		</if>
	</select>
	<select id="totalSelectUserStatistics" databaseId="sqlserver" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultType="Integer">
		WITH INLINE_LENGTH AS  (
			 SELECT convert(integer,R_CONFIG_VALUE) AS INLINE
			 FROM RS_ETC_CONFIG
			  WHERE R_CONFIG_KEY='INLINE_LENGTH')  ,

			 TMP_RECFILE AS (

			SELECT
				r_user_id
				<if test="dayTimeBy=='timeBy'">
				,	R_REC_RTIME
				</if>
				,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(convert(integer,R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LEN(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(COALESCE(CONVERT(INTEGER,R_CALL_TTIME_CONNECT),0)) AS REAL_CALL_TIME

				<if test="dayTimeBy!='timeBy'">
				, min(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)) as min_call_time
				,max(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER))as max_call_time
				,round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				</if>
				FROM RS_RECFILE, INLINE_LENGTH
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
				GROUP BY RS_RECFILE.r_user_id
			    <if test="dayTimeBy=='timeBy'">
				, R_REC_RTIME
				</if>
		)
	<if test="dayTimeBy=='timeBy'">
	,	TEMP_TIME as(
			SELECT convert(varchar(2),g.IntValue) AS TMP_TIME         FROM generate_series(8 , 22, 1 ) g
		)
	</if>
		SELECT
			count(*)
		FROM
		<if test="dayTimeBy=='timeBy'">
		TEMP_TIME
		left join
		</if>
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>

					R_USER_ID NOT IN ('manager') and R_USE_YN='Y' AND COALESCE(LTRIM(RTRIM(R_EXT_NO)),'')IS NOT NULL
					AND R_BG_CODE !='BGIVR'
					<!-- AND     COALESCE(R_EXT_NO, '') IS NOT NULL -->
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				AND R_BG_CODE !='BGIVR'
		) AS USER_INFO

		<if test="dayTimeBy=='timeBy'">
		on 1=1
		</if>
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON USER_INFO.r_user_id = RECFILE.r_user_id
		<if test="dayTimeBy=='timeBy'">
		and tmp_time =  r_rec_rtime
		</if>
	</select>
	<select id="totalSelectUserStatistics" databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultType="Integer">
		WITH INLINE_LENGTH AS  (
			 SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE
			 FROM RS_ETC_CONFIG
			  WHERE R_CONFIG_KEY='INLINE_LENGTH')  

			 ,TMP_RECFILE AS (

			SELECT
				r_user_id
				<if test="dayTimeBy=='timeBy'">
				,	R_REC_RTIME
				</if>
				,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME_CONNECT),0)) AS REAL_CALL_TIME

				<if test="dayTimeBy!='timeBy'">
				, min(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)) as min_call_time
				,max(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER))as max_call_time
				,round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				</if>
				FROM RS_RECFILE, INLINE_LENGTH
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				AND NOT (r_cust_phone1 IS NULL	AND r_call_kind1 IS NULL)
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
				GROUP BY RS_RECFILE.r_user_id
			    <if test="dayTimeBy=='timeBy'">
				, R_REC_RTIME
				</if>
		)
	<if test="dayTimeBy=='timeBy'">
	,	TEMP_TIME as(
			SELECT 7 + LEVEL AS TMP_TIME FROM DUAL CONNECT BY LEVEL <![CDATA[<]]> 16
		)
	</if>
		SELECT
			count(*)
		FROM
		<if test="dayTimeBy=='timeBy'">
		TEMP_TIME
		left join
		</if>
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>

					R_USER_ID NOT IN ('manager') and R_USE_YN='Y' AND COALESCE(LTRIM(RTRIM(R_EXT_NO)),'')IS NOT NULL
					AND R_BG_CODE !='BGIVR'
					<!-- AND     COALESCE(R_EXT_NO, '') IS NOT NULL -->
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				AND R_BG_CODE !='BGIVR'
		) USER_INFO

		<if test="dayTimeBy=='timeBy'">
		on 1=1
		</if>
		LEFT JOIN TMP_RECFILE RECFILE
		ON USER_INFO.r_user_id = RECFILE.r_user_id
		<if test="dayTimeBy=='timeBy'">
		and tmp_time =  r_rec_rtime
		</if>
	</select>
	<!-- <select id="selectDayTimeUserStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			SELECT
				R_REC_DATE,
				R_REC_RTIME,
				R_EXT_NUM,
				R_USER_ID as r_ruser_id, 라오스
				SUM(CASE WHEN R_CALL_KIND1 = 'I' OR R_CALL_KIND1 = 'O' OR R_CALL_KIND1 = 'T' OR R_CALL_KIND1 = 'T2' OR R_CALL_KIND1 = 'C' OR R_CALL_KIND1 = 'C2' OR R_CALL_KIND1 = 'Z' OR R_CALL_KIND1 = 'Z2' THEN 1 ELSE 0 END) AS TOTAL_CALLS,
				SUM(CASE WHEN R_CALL_KIND1 = 'I' OR R_CALL_KIND1 = 'O' OR R_CALL_KIND1 = 'T' OR R_CALL_KIND1 = 'T2' OR R_CALL_KIND1 = 'C' OR R_CALL_KIND1 = 'C2' OR R_CALL_KIND1 = 'Z' OR R_CALL_KIND1 = 'Z2' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TOTAL_TIME,
				SUM(CASE WHEN R_CALL_KIND1 = 'I' THEN 1 ELSE 0 END) AS INBOUND_CALLS,
				SUM(CASE WHEN R_CALL_KIND1 = 'I' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME,
				SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS,
				SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME,
				SUM(CASE WHEN R_CALL_KIND1 = 'T' OR R_CALL_KIND1 = 'T2' THEN 1 ELSE 0 END) AS TRANSFER_CALLS,
				SUM(CASE WHEN R_CALL_KIND1 = 'T' OR R_CALL_KIND1 = 'T2' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME,
				SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND1 = 'C2' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS,
				SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND1 = 'C2' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME,
				SUM(CASE WHEN R_CALL_KIND1 = 'Z' OR R_CALL_KIND1 = 'Z2' THEN 1 ELSE 0 END) AS INTERNAL_CALLS,
				SUM(CASE WHEN R_CALL_KIND1 = 'Z' OR R_CALL_KIND1 = 'Z2' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
			FROM RS_RECFILE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				<if test="bgCode != null">
				AND R_BG_CODE IN (${bgCode})
				</if>
				<if test="mgCode != null">
				AND R_MG_CODE IN (${mgCode})
				</if>
				<if test="sgCode != null">
				AND R_SG_CODE IN (${sgCode})
				</if>
				<if test="userId != null">
				AND R_USER_ID = #{userId}
				</if>
			GROUP BY
					R_REC_DATE
				,	R_REC_RTIME
				,	R_EXT_NUM
			GROUP BY r_ruser_id 	라오스
		)
		SELECT
			R_REC_DATE,
			R_REC_RTIME,
			R_USER_ID,
			R_USER_NAME,
			R_EXT_NO,
			R_BG_CODE,
			R_MG_CODE,
			R_SG_CODE,
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(INBOUND_CALLS, 0) AS INBOUND_CALLS,
			COALESCE(INBOUND_TIME, 0) AS INBOUND_TIME,
			COALESCE(OUTBOUND_CALLS, 0) AS OUTBOUND_CALLS,
			COALESCE(OUTBOUND_TIME, 0) AS OUTBOUND_TIME,
			COALESCE(OUTBOUND_CALLS, 0) AS TRANSFER_CALLS,
			COALESCE(OUTBOUND_TIME, 0) AS TRANSFER_TIME,
			COALESCE(OUTBOUND_CALLS, 0) AS CONFERENCE_CALLS,
			COALESCE(OUTBOUND_TIME, 0) AS CONFERENCE_TIME,
			COALESCE(INTERNAL_CALLS, 0) AS INTERNAL_CALLS,
			COALESCE(INTERNAL_TIME, 0) AS INTERNAL_TIME
		FROM

		TMP_RECFILE AS RECFILE
		LEFT JOIN
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO

				ON USER_INFO.R_USER_ID = RECFILE.r_ruser_id	라오스
				WHERE USER_INFO.R_USER_ID != 'admin'
			WHERE
					R_USER_ID not in ('admin','manager')
				<if test="bgCode != null">
				AND R_BG_CODE IN (${bgCode})
				</if>
				<if test="mgCode != null">
				AND R_MG_CODE IN (${mgCode})
				</if>
				<if test="sgCode != null">
				AND R_SG_CODE IN (${sgCode})
				</if>

		) AS USER_INFO
		ON USER_INFO.R_EXT_NO = RECFILE.R_EXT_NUM

		ORDER BY
				R_REC_DATE
			,	R_REC_RTIME
			,	R_BG_CODE
			,	R_MG_CODE
			,	R_SG_CODE
			,	R_USER_NAME
			, 	R_USER_ID

	</select>
	 -->
	<select id="callSummary" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH INLINE AS (
			SELECT
				R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
			FROM
				RS_ETC_CONFIG
			WHERE
				R_CONFIG_KEY='INLINE_LENGTH'
		)
		SELECT
					COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(R_CALL_TTIME::INTEGER,0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(COALESCE(R_CALL_TTIME_CONNECT::INTEGER,0)) AS REAL_CALL_TIME
		FROM RS_RECFILE, INLINE
		WHERE 1=1
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		<choose>
			<when test="sDate!=null and eDate!=null">
				AND R_REC_DATE BETWEEN #{sDate} AND #{eDate}
			</when>
			<otherwise>
				AND R_REC_DATE=TO_CHAR(NOW(),'YYYYMMDD')
			</otherwise>
		</choose>
					<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
						AND RS_RECFILE.R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
						AND RS_RECFILE.R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
						AND RS_RECFILE.R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
	</select>


	<select id="callCountbyType" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)

		SELECT
					SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS

		FROM RS_RECFILE, INLINE
		WHERE 1=1
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		AND R_REC_DATE=TO_CHAR(NOW(),'YYYYMMDD')
		AND RS_RECFILE.R_USER_ID IS NOT NULL
		AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
						AND RS_RECFILE.R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
						AND RS_RECFILE.R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
						AND RS_RECFILE.R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
	</select>


 	<select id="callCountbyTime" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultType="com.furence.recsee.statistics.model.StatisticsInfo">
		WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)

		SELECT
			SUM(CASE WHEN R_CALL_TTIME::INTEGER <![CDATA[<]]>30 THEN 1 ELSE 0 END)  "sec30",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >=30 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >=60 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >=120 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >=180 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >=240 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >=300 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >=420 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
			SUM(CASE WHEN R_CALL_TTIME::INTEGER >= 600 THEN 1 ELSE 0 END) "moresec600"
		FROM RS_RECFILE,INLINE
		WHERE 1=1
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		AND R_REC_DATE=TO_CHAR(NOW(),'YYYYMMDD')
		AND RS_RECFILE.R_USER_ID IS NOT NULL
		AND RS_RECFILE.R_BG_CODE IS NOT NULL
		AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH
					<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
						AND RS_RECFILE.R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
						AND RS_RECFILE.R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
						AND RS_RECFILE.R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
	</select>


	<select id="callCountbyDay" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH DAY_TABLE AS (
			SELECT
				REPLACE((CURRENT_DATE -30+i)::varchar,'-','') AS DAILY_DATE
			FROM GENERATE_SERIES(0, 30) AS t(i)
		),
		INLINE AS (
			SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
			FROM RS_ETC_CONFIG
			WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)
		SELECT
			A.DAILY_DATE AS R_REC_DATE,
				COUNT(R_EXT_NUM) AS TOTAL_CALLS

		FROM DAY_TABLE AS A LEFT JOIN (select * from RS_RECFILE where RS_RECFILE.R_USER_ID IS NOT NULL
			AND RS_RECFILE.R_BG_CODE IS NOT NULL) AS B
		ON A.DAILY_DATE = B.R_REC_DATE, INLINE
		where (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
					<if test="vSysCode != null">
					AND B.R_V_SYS_CODE = #{vSysCode}
					</if>
		GROUP BY A.DAILY_DATE
		ORDER BY A.DAILY_DATE
	</select>

	<select id='callCountByCallTimeUser' parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
				SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			SELECT
				r_user_id,
				<choose>
					<when test="dayTimeBy=='callTimeByRealOutbound'">
						count(*) FILTER (where r_call_stime_connect != '0') "total",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER <![CDATA[<]]>30 and r_call_stime_connect !='0' THEN 1 ELSE 0 END)  "sec30",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=30 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=60 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=120 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=180 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=240 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=300 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=420 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >= 600 THEN 1 ELSE 0 END) "moresec600"
					</when>
					<otherwise>
						count(*) "total",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER <![CDATA[<]]>30 THEN 1 ELSE 0 END)  "sec30",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=30 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=60 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=120 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=180 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=240 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=300 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=420 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >= 600 THEN 1 ELSE 0 END) "moresec600"
					</otherwise>
				</choose>

			FROM RS_RECFILE, INLINE
			WHERE R_REC_DATE BETWEEN #{sDate} AND #{eDate}
			AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
			AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH
			AND RS_RECFILE.R_USER_ID IS NOT NULL
			AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="dayTimeBy=='callTimeByInbound'">
				AND R_CALL_KIND1 != 'O'
				</if>
				<if test="dayTimeBy=='callTimeByOutbound' or dayTimeBy=='callTimeByRealOutbound'">
				AND R_CALL_KIND1 = 'O'
				</if>
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY 	r_user_id
			)
		SELECT
				USER_INFO.R_USER_ID
			,	R_USER_NAME
			,	R_EXT_NO
			,	R_BG_CODE
			,	R_MG_CODE
			,	R_SG_CODE
			,   COALESCE(TMP_RECFILE.total,0) total
			,	COALESCE(TMP_RECFILE.sec30,0) sec30
			,	COALESCE(TMP_RECFILE.sec60,0) sec60
			,	COALESCE(TMP_RECFILE.sec120,0) sec120
			,	COALESCE(TMP_RECFILE.sec180,0) sec180
			,	COALESCE(TMP_RECFILE.sec240,0) sec240
			,	COALESCE(TMP_RECFILE.sec300,0) sec300
			,	COALESCE(TMP_RECFILE.sec420,0) sec420
			,	COALESCE(TMP_RECFILE.sec600,0) sec600
			,	COALESCE(TMP_RECFILE.moresec600,0) moresec600

		FROM
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
			FROM
				RS_RUSER_INFO
			WHERE		<!-- R_USER_ID NOT IN ('manager') AND --> R_USE_YN='Y'
				AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL
				AND R_BG_CODE !='BGIVR'
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
		) AS USER_INFO
		LEFT JOIN
		TMP_RECFILE
		ON USER_INFO.r_user_id = TMP_RECFILE.r_user_id
		ORDER BY
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
				</when>
				<otherwise>
					R_USER_ID
				, 	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
				,	R_USER_NAME
				</otherwise>
			</choose>

		<choose>
			<when test="count != null and posStart != null">
			LIMIT #{count} OFFSET #{posStart}
			</when>
			<when test="count ==1">
			</when>
			<otherwise>
				LIMIT 10 OFFSET 0
			</otherwise>
		</choose>

	</select>

	<select id='totalCallCountByCallTimeUser' parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultType="Integer">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
				SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
				FROM RS_ETC_CONFIG
				WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			SELECT
				r_user_id,
				<choose>
					<when test="dayTimeBy=='callTimeByRealOutbound'">
						SUM(CASE WHEN r_call_ttime_connect::INTEGER <![CDATA[<]]>30 and r_call_stime_connect !='0' THEN 1 ELSE 0 END)  "sec30",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=30 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=60 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=120 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=180 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=240 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=300 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >=420 AND r_call_ttime_connect::INTEGER <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
						SUM(CASE WHEN r_call_ttime_connect::INTEGER >= 600 THEN 1 ELSE 0 END) "moresec600"
					</when>
					<otherwise>
						SUM(CASE WHEN R_CALL_TTIME::INTEGER <![CDATA[<]]>30 THEN 1 ELSE 0 END)  "sec30",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=30 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=60 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=120 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=180 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=240 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=300 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >=420 AND R_CALL_TTIME::INTEGER <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
						SUM(CASE WHEN R_CALL_TTIME::INTEGER >= 600 THEN 1 ELSE 0 END) "moresec600"
					</otherwise>
				</choose>
			FROM RS_RECFILE, INLINE
			WHERE R_REC_DATE BETWEEN #{sDate} AND #{eDate}
			AND RS_RECFILE.R_USER_ID IS NOT NULL
			AND RS_RECFILE.R_BG_CODE IS NOT NULL
			AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
			AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH
				<if test="dayTimeBy=='callTimeByInbound'">
				AND R_CALL_KIND1 != 'O'
				</if>
				<if test="dayTimeBy=='callTimeByOutbound' or dayTimeBy=='callTimeByRealOutbound'">
				AND R_CALL_KIND1 = 'O'
				</if>
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY 	r_user_id
			)
		SELECT
				count(*)

		FROM
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
			FROM
				RS_RUSER_INFO
			WHERE		<!-- R_USER_ID NOT IN ('manager') AND --> R_USE_YN='Y'
				AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL
				AND R_BG_CODE !='BGIVR'
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
		) AS USER_INFO
		LEFT JOIN
		TMP_RECFILE
		ON USER_INFO.r_user_id = TMP_RECFILE.r_user_id
	</select>
	
	<select id="callSummary" databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH INLINE AS (
			SELECT
				TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
			FROM
				RS_ETC_CONFIG
			WHERE
				R_CONFIG_KEY='INLINE_LENGTH'
		)
		SELECT
					COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS OUTBOUND_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS TRANSFER_TIME
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS CONFERENCE_TIME
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER) ELSE 0 END) AS INTERNAL_TIME
				,	SUM(CASE WHEN COALESCE(R_CALL_STIME_CONNECT,'0')!='0' THEN 1 ELSE 0 END) AS REAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME_CONNECT),0)) AS REAL_CALL_TIME
		FROM RS_RECFILE, INLINE
		WHERE 1=1
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		<choose>
			<when test="sDate!=null and eDate!=null">
				AND R_REC_DATE BETWEEN #{sDate} AND #{eDate}
			</when>
			<otherwise>
				AND R_REC_DATE=TO_CHAR(CURRENT_DATE,'YYYYMMDD')
			</otherwise>
		</choose>
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						AND RS_RECFILE.R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						AND RS_RECFILE.R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						AND RS_RECFILE.R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
	</select>


	<select id="callCountbyType" databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)

		SELECT
					SUM(CASE WHEN R_CALL_KIND1 != 'O' THEN 1 ELSE 0 END) AS INBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'O' THEN 1 ELSE 0 END) AS OUTBOUND_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'TR' OR R_CALL_KIND2 = 'TR' THEN 1 ELSE 0 END) AS TRANSFER_CALLS
				,	SUM(CASE WHEN R_CALL_KIND1 = 'C' OR R_CALL_KIND2 = 'C' THEN 1 ELSE 0 END) AS CONFERENCE_CALLS
				,	SUM(CASE WHEN LENGTH(R_CUST_PHONE1)   <![CDATA[<=]]>  INLINE_LENGTH THEN 1 ELSE 0 END) AS INTERNAL_CALLS

		FROM RS_RECFILE, INLINE
		WHERE 1=1
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		AND R_REC_DATE=TO_CHAR(CURRENT_DATE,'YYYYMMDD')
		AND RS_RECFILE.R_USER_ID IS NOT NULL
		AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						AND RS_RECFILE.R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						AND RS_RECFILE.R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						AND RS_RECFILE.R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
	</select>


 	<select id="callCountbyTime" databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultType="com.furence.recsee.statistics.model.StatisticsInfo">
		WITH INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)

		SELECT
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>30 THEN 1 ELSE 0 END)  "sec30",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=30 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>60 THEN 1 ELSE 0 END) "sec60",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=60 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>120 THEN 1 ELSE 0 END) "sec120",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=120 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>180  THEN 1 ELSE 0 END) "sec180",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=180 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>240  THEN 1 ELSE 0 END) "sec240",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=240 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>300  THEN 1 ELSE 0 END) "sec300",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=300 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>420  THEN 1 ELSE 0 END) "sec420",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=420 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>600  THEN 1 ELSE 0 END) "sec600",
			SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >= 600 THEN 1 ELSE 0 END) "moresec600"
		FROM RS_RECFILE,INLINE
		WHERE 1=1
		AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
		AND R_REC_DATE=TO_CHAR(CURRENT_DATE,'YYYYMMDD')
		AND RS_RECFILE.R_USER_ID IS NOT NULL
		AND RS_RECFILE.R_BG_CODE IS NOT NULL
		AND LENGTH(R_CUST_PHONE1) <![CDATA[>]]> INLINE_LENGTH
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						AND RS_RECFILE.R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						AND RS_RECFILE.R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						AND RS_RECFILE.R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
	</select>


	<select id="callCountbyDay" databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
		WITH DAY_TABLE AS (
			SELECT 
			REPLACE(TO_CHAR(CURRENT_DATE -31 + LEVEL,'yyyymmdd'),'-','') AS DAILY_DATE 
			FROM DUAL 
			CONNECT BY LEVEL <![CDATA[<]]> 32
		),
		INLINE AS (
			SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
			FROM RS_ETC_CONFIG
			WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)
		SELECT
			A.DAILY_DATE AS R_REC_DATE,
				COUNT(R_EXT_NUM) AS TOTAL_CALLS

		FROM DAY_TABLE A LEFT JOIN (select * from RS_RECFILE where RS_RECFILE.R_USER_ID IS NOT NULL
			AND RS_RECFILE.R_BG_CODE IS NOT NULL) B
		ON A.DAILY_DATE = B.R_REC_DATE, INLINE
		where (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
					<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
					<if test="vSysCode != null">
					AND B.R_V_SYS_CODE = #{vSysCode}
					</if>
		GROUP BY A.DAILY_DATE
		ORDER BY A.DAILY_DATE
	</select>

	<select id='callCountByCallTimeUser' databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="BaseResultMap">
	WITH INLINE AS (
				TO_NUMBER(SELECT R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
		,TMP_RECFILE AS (
			
			SELECT
				r_user_id,
				<choose>
					<when test="dayTimeBy=='callTimeByRealOutbound'">
						count(CASE WHEN r_call_stime_connect != '0' THEN 1 END) total,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>30 and r_call_stime_connect !='0' THEN 1 ELSE 0 END)  sec30,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=30 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>60 THEN 1 ELSE 0 END) sec60,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=60 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>120 THEN 1 ELSE 0 END) sec120,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=120 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>180  THEN 1 ELSE 0 END) sec180,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=180 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>240  THEN 1 ELSE 0 END) sec240,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=240 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>300  THEN 1 ELSE 0 END) sec300,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=300 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>420  THEN 1 ELSE 0 END) sec420,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=420 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>600  THEN 1 ELSE 0 END) sec600,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >= 600 THEN 1 ELSE 0 END) moresec600
					</when>
					<otherwise>
						count(*) total,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>30 THEN 1 ELSE 0 END)  sec30,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=30 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>60 THEN 1 ELSE 0 END) sec60,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=60 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>120 THEN 1 ELSE 0 END) sec120,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=120 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>180  THEN 1 ELSE 0 END) sec180,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=180 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>240  THEN 1 ELSE 0 END) sec240,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=240 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>300  THEN 1 ELSE 0 END) sec300,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=300 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>420  THEN 1 ELSE 0 END) sec420,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=420 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>600  THEN 1 ELSE 0 END) sec600,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >= 600 THEN 1 ELSE 0 END) moresec600
					</otherwise>
				</choose>

			FROM RS_RECFILE, INLINE
			WHERE R_REC_DATE BETWEEN #{sDate} AND #{eDate}
			AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
			AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH
			AND RS_RECFILE.R_USER_ID IS NOT NULL
			AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="dayTimeBy=='callTimeByInbound'">
				AND R_CALL_KIND1 != 'O'
				</if>
				<if test="dayTimeBy=='callTimeByOutbound' or dayTimeBy=='callTimeByRealOutbound'">
				AND R_CALL_KIND1 = 'O'
				</if>
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY 	r_user_id
			)
	SELECT *
    FROM (
      SELECT PAGE.*, ROWNUM AS RNUM
      FROM (
		SELECT
				USER_INFO.R_USER_ID
			,	R_USER_NAME
			,	R_EXT_NO
			,	R_BG_CODE
			,	R_MG_CODE
			,	R_SG_CODE
			,   COALESCE(TMP_RECFILE.total,0) total
			,	COALESCE(TMP_RECFILE.sec30,0) sec30
			,	COALESCE(TMP_RECFILE.sec60,0) sec60
			,	COALESCE(TMP_RECFILE.sec120,0) sec120
			,	COALESCE(TMP_RECFILE.sec180,0) sec180
			,	COALESCE(TMP_RECFILE.sec240,0) sec240
			,	COALESCE(TMP_RECFILE.sec300,0) sec300
			,	COALESCE(TMP_RECFILE.sec420,0) sec420
			,	COALESCE(TMP_RECFILE.sec600,0) sec600
			,	COALESCE(TMP_RECFILE.moresec600,0) moresec600

		FROM
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
			FROM
				RS_RUSER_INFO
			WHERE		<!-- R_USER_ID NOT IN ('manager') AND --> R_USE_YN='Y'
				AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL
				AND R_BG_CODE !='BGIVR'
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
		) USER_INFO
		LEFT JOIN
		TMP_RECFILE
		ON USER_INFO.r_user_id = TMP_RECFILE.r_user_id
		ORDER BY
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
				</when>
				<otherwise>
					R_USER_ID
				, 	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
				,	R_USER_NAME
				</otherwise>
			</choose>

		<choose>
			<when test="count != null and posStart != null">
			<!-- LIMIT #{count} OFFSET #{posStart} -->
			) PAGE
			    WHERE ROWNUM <![CDATA[<=]]> TO_NUMBER(#{count}+#{posStart})
			  ) PAGE
			  WHERE RNUM <![CDATA[>]]> #{posStart}
			</when>
			<when test="count ==1">
			</when>
			<otherwise>
				<!-- LIMIT 10 OFFSET 0 -->
				) PAGE
			    WHERE ROWNUM <![CDATA[<=]]> 10
			  ) PAGE
			  WHERE RNUM <![CDATA[>]]> 0
			</otherwise>
		</choose>

	</select>

	<select id='totalCallCountByCallTimeUser' databaseId="oracle" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultType="Integer">
	WITH INLINE AS (
				SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
				FROM RS_ETC_CONFIG
				WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
		, TMP_RECFILE AS (
			
			SELECT
				r_user_id,
				<choose>
					<when test="dayTimeBy=='callTimeByRealOutbound'">
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>30 and r_call_stime_connect !='0' THEN 1 ELSE 0 END)  sec30,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=30 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>60 THEN 1 ELSE 0 END) sec60,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=60 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>120 THEN 1 ELSE 0 END) sec120,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=120 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>180  THEN 1 ELSE 0 END) sec180,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=180 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>240  THEN 1 ELSE 0 END) sec240,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=240 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>300  THEN 1 ELSE 0 END) sec300,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=300 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>420  THEN 1 ELSE 0 END) sec420,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >=420 AND TO_NUMBER(r_call_ttime_connect) <![CDATA[<]]>600  THEN 1 ELSE 0 END) sec600,
						SUM(CASE WHEN TO_NUMBER(r_call_ttime_connect) >= 600 THEN 1 ELSE 0 END) moresec600
					</when>
					<otherwise>
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>30 THEN 1 ELSE 0 END)  sec30,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=30 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>60 THEN 1 ELSE 0 END) sec60,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=60 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>120 THEN 1 ELSE 0 END) sec120,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=120 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>180  THEN 1 ELSE 0 END) sec180,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=180 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>240  THEN 1 ELSE 0 END) sec240,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=240 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>300  THEN 1 ELSE 0 END) sec300,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=300 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>420  THEN 1 ELSE 0 END) sec420,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >=420 AND TO_NUMBER(R_CALL_TTIME) <![CDATA[<]]>600  THEN 1 ELSE 0 END) sec600,
						SUM(CASE WHEN TO_NUMBER(R_CALL_TTIME) >= 600 THEN 1 ELSE 0 END) moresec600
					</otherwise>
				</choose>
			FROM RS_RECFILE, INLINE
			WHERE R_REC_DATE BETWEEN #{sDate} AND #{eDate}
			AND RS_RECFILE.R_USER_ID IS NOT NULL
			AND RS_RECFILE.R_BG_CODE IS NOT NULL
			AND (R_BUFFER8 != 'B' OR R_BUFFER8 != 'A' OR R_BUFFER8 IS NULL)
			AND LENGTH(R_CUST_PHONE1) > INLINE_LENGTH
				<if test="dayTimeBy=='callTimeByInbound'">
				AND R_CALL_KIND1 != 'O'
				</if>
				<if test="dayTimeBy=='callTimeByOutbound' or dayTimeBy=='callTimeByRealOutbound'">
				AND R_CALL_KIND1 = 'O'
				</if>
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY 	r_user_id
			)
		SELECT
				count(*)

		FROM
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
			FROM
				RS_RUSER_INFO
			WHERE		<!-- R_USER_ID NOT IN ('manager') AND --> R_USE_YN='Y'
				AND COALESCE(TRIM(R_EXT_NO),'')IS NOT NULL
				AND R_BG_CODE !='BGIVR'
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
		) USER_INFO
		LEFT JOIN
		TMP_RECFILE
		ON USER_INFO.r_user_id = TMP_RECFILE.r_user_id
	</select>
	
	<!-- 모바일 시, 일, 월별 통계 -->
	<select id="selectCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)
		<if test="divisionBy=='timeBy'">
		,TEMP_TIME AS(
					SELECT LPAD(GENERATE_SERIES('0','23',1)::TEXT,2,'0') AS TMP_TIME
			)
		</if>
		<choose>
			<!-- 모바일 녹취 콜 통계 - 시간별 -->
			<when test="divisionBy=='timeBy'">
				SELECT
					TMP_TIME as R_REC_RTIME,
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						a.R_BG_NAME,
						</if>
						<if test="mgCodeL != null">
						a.R_MG_NAME,
						</if>
						<if test="sgCodeL != null">
						a.R_SG_NAME,
						</if>
					</if>
					coalesce(TOTAL_CALLS,'0') as TOTAL_CALLS,
					coalesce(SUCCESS_CONNECT,'0') as SUCCESS_CONNECT,
					coalesce(GIVEUP_CALL,'0') as GIVEUP_CALL,
					coalesce(NO_ANSWER,'0') as NO_ANSWER,
					coalesce(BUSY_CALL,'0') as BUSY_CALL
				FROM(
				(
					SELECT
						R_REC_RTIME
						<if test='authBeforeGroup != "Y"'>
							<if test="bgCodeL != null">
							,	R_BG_NAME
							</if>
							<if test="mgCodeL != null">
							,	R_MG_NAME
							</if>
							<if test="sgCodeL != null">
							,	R_SG_NAME
							</if>
						</if>
							,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(R_CALL_TTIME::INTEGER,0)) AS TOTAL_TIME
				,	SUM(CASE WHEN COALESCE(trim(r_call_stime_connect),'') IS NOT NULL THEN 1 ELSE 0 END) AS SUCCESS_CONNECT
				,	SUM(CASE WHEN COALESCE(trim(r_call_stime_connect),'') IS NULL THEN 1 ELSE 0 END) AS GIVEUP_CALL
				,	SUM(CASE WHEN R_BUFFER1 = 'noAnswer' THEN 1 ELSE 0 END) AS NO_ANSWER <!-- 부재중 -->
				,	SUM(CASE WHEN R_BUFFER1 = 'busy' THEN 1 ELSE 0 END) AS BUSY_CALL <!-- 통화중 -->
					FROM RS_RECFILE
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
						</if>
						<if test="mgCodeL != null">
						LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
						</if>
						<if test="sgCodeL != null">
						LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
						</if>
					</if>
					, INLINE
					WHERE
						R_REC_DATE BETWEEN #{sDate} AND #{eDate}
						AND RS_RECFILE.R_USER_ID IS NOT NULL
						AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
					GROUP BY R_REC_RTIME
						<if test='authBeforeGroup != "Y"'>
							 <if test="bgCodeL != null">
								, 	R_BG_NAME
							 </if>
							 <if test="mgCodeL != null">
								,	R_MG_NAME
							 </if>
							 <if test="sgCodeL != null">
								, 	R_SG_NAME
							 </if>
						</if>
							 ) a
					RIGHT OUTER JOIN TEMP_TIME ON R_REC_RTIME=TMP_TIME
				)
				<if test="init == 'true'">
				where 1=0
				</if>
				ORDER BY R_REC_RTIME
			</when>		
			<otherwise><!-- 모바일 녹취 콜 통계 - 일자별, 월별 -->
				SELECT
					<choose>
						<when test="divisionBy=='monthBy'">
							SUBSTR(R_REC_DATE, 5,2) AS R_MONTH
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>			
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						,	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						,	R_SG_NAME
						</if>
					</if>
					,	COUNT(*) AS TOTAL_CALLS
					,	SUM(COALESCE(R_CALL_TTIME::INTEGER,0)) AS TOTAL_TIME
					,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT
					,	SUM(CASE WHEN r_call_ttime = '00' THEN 1 ELSE 0 END) AS GIVEUP_CALL
					,	SUM(CASE WHEN R_BUFFER1 = 'noanswer' THEN 1 ELSE 0 END) AS NO_ANSWER
					,	SUM(CASE WHEN R_BUFFER1 = 'busy' THEN 1 ELSE 0 END) AS BUSY_CALL
			FROM RS_RECFILE
				<if test='authBeforeGroup != "Y"'>
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
				</if>
				, INLINE
				WHERE
					R_REC_DATE BETWEEN #{sDate} AND #{eDate}
					AND RS_RECFILE.R_USER_ID IS NOT NULL
					AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
				GROUP BY 
					<choose>
						<when test="divisionBy=='monthBy'">
							SUBSTR(R_REC_DATE, 5,2)
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>				
					<if test='authBeforeGroup != "Y"'>
						<if test="bgCodeL != null">
						, 	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						, 	R_SG_NAME
						</if>
					</if>
				ORDER BY 
					<choose>
						<when test="divisionBy=='monthBy'">
							R_MONTH
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>		
			</otherwise>
		</choose>
	</select>
	
	<select id="selectCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
		)
		<if test="divisionBy=='timeBy'">
		,TEMP_TIME AS(
					SELECT -1 + LEVEL AS TMP_TIME 
					FROM DUAL
         		 	CONNECT BY LEVEL <![CDATA[<]]> 25
			)
		</if>
		<choose>
			<!-- 모바일 녹취 콜 통계 - 시간별 -->
			<when test="divisionBy=='timeBy'">
				SELECT
					TMP_TIME as R_REC_RTIME,
					<if test="bgCodeL != null">
					a.R_BG_NAME,
					</if>
					<if test="mgCodeL != null">
					a.R_MG_NAME,
					</if>
					<if test="sgCodeL != null">
					a.R_SG_NAME,
					</if>
					coalesce(TOTAL_CALLS,'0') as TOTAL_CALLS,
					coalesce(SUCCESS_CONNECT,'0') as SUCCESS_CONNECT,
					coalesce(GIVEUP_CALL,'0') as GIVEUP_CALL,
					coalesce(NO_ANSWER,'0') as NO_ANSWER,
					coalesce(BUSY_CALL,'0') as BUSY_CALL
				FROM(
				(
					SELECT
						R_REC_RTIME
						<if test="bgCodeL != null">
						,	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						,	R_SG_NAME
						</if>
							,	COUNT(*) AS TOTAL_CALLS
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
				,	SUM(CASE WHEN COALESCE(trim(r_call_stime_connect),'') IS NOT NULL THEN 1 ELSE 0 END) AS SUCCESS_CONNECT
				,	SUM(CASE WHEN COALESCE(trim(r_call_stime_connect),'') IS NULL THEN 1 ELSE 0 END) AS GIVEUP_CALL
				,	SUM(CASE WHEN R_BUFFER1 = 'noAnswer' THEN 1 ELSE 0 END) AS NO_ANSWER <!-- 부재중 -->
				,	SUM(CASE WHEN R_BUFFER1 = 'busy' THEN 1 ELSE 0 END) AS BUSY_CALL <!-- 통화중 -->
					FROM RS_RECFILE
					<if test="bgCodeL != null">
					LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
					</if>
					<if test="mgCodeL != null">
					LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
					</if>
					<if test="sgCodeL != null">
					LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
					</if>
					, INLINE
					WHERE
						R_REC_DATE BETWEEN #{sDate} AND #{eDate}
						AND RS_RECFILE.R_USER_ID IS NOT NULL
						AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
						<if test="vSysCode != null">
						AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
						</if>
					GROUP BY R_REC_RTIME
							 <if test="bgCodeL != null">
								, 	R_BG_NAME
							 </if>
							 <if test="mgCodeL != null">
								,	R_MG_NAME
							 </if>
							 <if test="sgCodeL != null">
								, 	R_SG_NAME
							 </if>) a
					RIGHT OUTER JOIN TEMP_TIME ON R_REC_RTIME=TMP_TIME
				)
				<if test="init == 'true'">
				where 1=0
				</if>
				ORDER BY R_REC_RTIME
			</when>		
			<otherwise><!-- 모바일 녹취 콜 통계 - 일자별, 월별 -->
				SELECT
					<choose>
						<when test="divisionBy=='monthBy'">
							SUBSTR(R_REC_DATE, 5,2) AS R_MONTH
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>			
					<if test="bgCodeL != null">
					,	R_BG_NAME
					</if>
					<if test="mgCodeL != null">
					,	R_MG_NAME
					</if>
					<if test="sgCodeL != null">
					,	R_SG_NAME
					</if>
					,	COUNT(*) AS TOTAL_CALLS
					,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME
					,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT
					,	SUM(CASE WHEN r_call_ttime = '00' THEN 1 ELSE 0 END) AS GIVEUP_CALL
					,	SUM(CASE WHEN R_BUFFER1 = 'noanswer' THEN 1 ELSE 0 END) AS NO_ANSWER
					,	SUM(CASE WHEN R_BUFFER1 = 'busy' THEN 1 ELSE 0 END) AS BUSY_CALL
			FROM RS_RECFILE
				<if test="bgCodeL != null">
				LEFT JOIN RS_BG_INFO ON RS_RECFILE.R_BG_CODE = RS_BG_INFO.R_BG_CODE
				</if>
				<if test="mgCodeL != null">
				LEFT JOIN RS_MG_INFO ON RS_RECFILE.R_BG_CODE = RS_MG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_MG_INFO.R_MG_CODE
				</if>
				<if test="sgCodeL != null">
				LEFT JOIN RS_SG_INFO ON RS_RECFILE.R_BG_CODE = RS_SG_INFO.R_BG_CODE AND RS_RECFILE.R_MG_CODE = RS_SG_INFO.R_MG_CODE AND RS_RECFILE.R_SG_CODE = RS_SG_INFO.R_SG_CODE
				</if>
				, INLINE
				WHERE
					R_REC_DATE BETWEEN #{sDate} AND #{eDate}
					AND RS_RECFILE.R_USER_ID IS NOT NULL
					AND RS_RECFILE.R_BG_CODE IS NOT NULL
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						and RS_RECFILE.R_BG_CODE in
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						and RS_RECFILE.R_MG_CODE in
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						and RS_RECFILE.R_SG_CODE in
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						and RS_RECFILE.R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="vSysCode != null">
					AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
					</if>
				GROUP BY 
					<choose>
						<when test="divisionBy=='monthBy'">
							SUBSTR(R_REC_DATE, 5,2)
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>				
						<if test="bgCodeL != null">
						, 	R_BG_NAME
						</if>
						<if test="mgCodeL != null">
						,	R_MG_NAME
						</if>
						<if test="sgCodeL != null">
						, 	R_SG_NAME
						</if>
				ORDER BY 
					<choose>
						<when test="divisionBy=='monthBy'">
							R_MONTH
						</when>
						<otherwise>
							R_REC_DATE
						</otherwise>
					</choose>		
			</otherwise>
		</choose>
	</select>
	
	<!-- 모바일 그룹 유저별 통계 -->
	<select id="selectUsersCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						r_user_id
					</when>
					<otherwise>
						r_bg_code
					,	r_mg_code
					,	r_sg_code
					</otherwise>
				</choose>				
				,	COUNT(*) AS TOTAL_CALLS				
				,	SUM(
						EXTRACT(
							'EPOCH' FROM (
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
										ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
										END)::TIME
									ELSE '000000'::TIME
									END
								ELSE '000000'::TIME
								END									
							)
						)
					)::INTEGER AS TOTAL_TIME 	
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT				
				,	ROUND(
						AVG(
							EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						)::INTEGER
						,2
					) AS AVG_CALL_TIME
				FROM RS_RECFILE, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
			    <choose>
					<when test="divisionBy=='userBy'">
						RS_RECFILE.r_user_id
					</when>
					<otherwise>
						RS_RECFILE.r_bg_code
						, RS_RECFILE.r_mg_code
						, RS_RECFILE.r_sg_code
					</otherwise>
				</choose>
		)
		SELECT
			<choose>
				<when test="divisionBy=='userBy'">
					USER_INFO.R_USER_ID,			
					R_USER_NAME,			
					R_EXT_NO,
				</when>
				<otherwise>
					TOTAL_USER,				
				</otherwise>
			</choose>
			
			USER_INFO.R_BG_CODE,			
			USER_INFO.R_MG_CODE,			
			USER_INFO.R_SG_CODE,
			
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,			
			COALESCE(SUCCESS_CONNECT, 0) AS SUCCESS_CONNECT,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(avg_call_time, 0) AS avg_call_time
		FROM
		(
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						R_USER_ID
					,	R_USER_NAME
					,	R_EXT_NO
					,	R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					</when>
					<otherwise>
						R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					,   count(*) as  TOTAL_USER				
					</otherwise>
				</choose>
			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID != 'admin'
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="divisionBy=='groupBy'">
					GROUP BY 
						R_BG_CODE 			
						,	R_MG_CODE 				
						,	R_SG_CODE 
				</if>
				
		) AS USER_INFO

		
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON 
			<choose>
				<when test="divisionBy=='userBy'">
					USER_INFO.r_user_id = RECFILE.r_user_id
				</when>
				<otherwise>
					USER_INFO.R_BG_CODE = RECFILE.R_BG_CODE
				and USER_INFO.R_MG_CODE = RECFILE.R_MG_CODE
				and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE
				</otherwise>
			</choose>	
		ORDER BY
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
				</when>
				<otherwise>
					<if test="divisionBy=='userBy'">
							R_USER_ID
						,	R_USER_NAME ,
					</if>			
					R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
				
				</otherwise>
			</choose>
			<choose>
				<when test='excelDownload == "Y"'>

				</when>
				<otherwise>
					<choose>
						<when test="count != null and posStart != null">
							LIMIT #{count} OFFSET #{posStart}
						</when>
						<otherwise>
							LIMIT 20 OFFSET 0
						</otherwise>
					</choose>
				</otherwise>
			</choose>
			
	</select>
	
	<select id="selectUsersCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
	
		SELECT *
		    FROM (
		      SELECT PAGE.*, ROWNUM RNUM
		      FROM (
	
	
			WITH INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			, TMP_RECFILE AS (
			
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						r_user_id
					</when>
					<otherwise>
						r_bg_code
					,	r_mg_code
					,	r_sg_code
					</otherwise>
				</choose>				
				,	COUNT(*) AS TOTAL_CALLS				
				,	SUM( TO_NUMBER(
						TO_CHAR(
								(CASE WHEN (RS_RECFILE.R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										CASE WHEN (R_CALL_ETIME <![CDATA[<]]> R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END)
								 , 'sssss')		
						) 
					) AS TOTAL_TIME		
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT				
				,	ROUND(
						AVG(
			              TO_NUMBER(
			              	TO_CHAR(
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME <![CDATA[<]]> R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END)
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END
								 
							, 'sssss')			
              			  )	
						) 
						,2) 
            AS AVG_CALL_TIME
				FROM RS_RECFILE, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
			    <choose>
					<when test="divisionBy=='userBy'">
						RS_RECFILE.r_user_id
					</when>
					<otherwise>
						RS_RECFILE.r_bg_code
						, RS_RECFILE.r_mg_code
						, RS_RECFILE.r_sg_code
					</otherwise>
				</choose>
		)
		      
			SELECT
			<choose>
				<when test="divisionBy=='userBy'">
					USER_INFO.R_USER_ID,			
					R_USER_NAME,			
					R_EXT_NO,
				</when>
				<otherwise>
					TOTAL_USER,				
				</otherwise>
			</choose>
			
			USER_INFO.R_BG_CODE,			
			USER_INFO.R_MG_CODE,			
			USER_INFO.R_SG_CODE,
			
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,			
			COALESCE(SUCCESS_CONNECT, 0) AS SUCCESS_CONNECT,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(avg_call_time, 0) AS avg_call_time
		FROM
		(
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						R_USER_ID
					,	R_USER_NAME
					,	R_EXT_NO
					,	R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					</when>
					<otherwise>
						R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					,   count(*) as  TOTAL_USER				
					</otherwise>
				</choose>
			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID != 'admin'
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="divisionBy=='groupBy'">
					GROUP BY 
						R_BG_CODE 			
						,	R_MG_CODE 				
						,	R_SG_CODE 
				</if>
				
		) AS USER_INFO

		
		LEFT JOIN TMP_RECFILE RECFILE
		ON 
			<choose>
				<when test="divisionBy=='userBy'">
					USER_INFO.r_user_id = RECFILE.r_user_id
				</when>
				<otherwise>
					USER_INFO.R_BG_CODE = RECFILE.R_BG_CODE
				and USER_INFO.R_MG_CODE = RECFILE.R_MG_CODE
				and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE
				</otherwise>
			</choose>	
		ORDER BY
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
				</when>
				<otherwise>
					<if test="divisionBy=='userBy'">
							R_USER_ID
						,	R_USER_NAME ,
					</if>			
					R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE
				
				</otherwise>
			</choose>
			<choose>
				<when test='excelDownload == "Y"'>
				</when>
				<otherwise>
					<choose>
						<when test="count != null and posStart != null">
							<!-- LIMIT #{count} OFFSET #{posStart} -->
							) PAGE
					    WHERE ROWNUM <![CDATA[<=]]> TO_NUMBER(#{count}+#{posStart})
					  ) PAGE
					  WHERE RNUM <![CDATA[>]]> #{posStart}
						</when>
						<otherwise>
							<!-- LIMIT 20 OFFSET 0 -->
							) PAGE
					    WHERE ROWNUM <![CDATA[<=]]> 20
					  ) PAGE
					  WHERE RNUM <![CDATA[>]]> 0
						</otherwise>
					</choose>
				</otherwise>
			</choose>
			
	</select>
	
	<!-- 모바일 그룹 유저별 통계 카운트용-->
	<select id="totalUsersCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			WITH INLINE AS (
					SELECT R_CONFIG_VALUE::INTEGER AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						r_user_id
					</when>
					<otherwise>
						r_bg_code
					,	r_mg_code
					,	r_sg_code
					</otherwise>
				</choose>				
				,	COUNT(*) AS TOTAL_CALLS				
				,	SUM(
						EXTRACT(
							'EPOCH' FROM (
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
										ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
										END)::TIME
									ELSE '000000'::TIME
									END
								ELSE '000000'::TIME
								END									
							)
						)
					)::INTEGER AS TOTAL_TIME 
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT				
				,	ROUND(
						AVG(
							EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						)::INTEGER
						,2
					) AS AVG_CALL_TIME
				FROM RS_RECFILE, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
			    <choose>
					<when test="divisionBy=='userBy'">
						RS_RECFILE.r_user_id
					</when>
					<otherwise>
						RS_RECFILE.r_bg_code
						, RS_RECFILE.r_mg_code
						, RS_RECFILE.r_sg_code
					</otherwise>
				</choose>
		)
		SELECT
			SUM(COALESCE(TOTAL_CALLS, 0)) AS TOTAL_CALLS
			,	SUM(COALESCE(SUCCESS_CONNECT, 0)) AS SUCCESS_CONNECT
			,	SUM(COALESCE(TOTAL_TIME, 0)) AS TOTAL_TIME
			,	SUM(COALESCE(avg_call_time, 0)) AS avg_call_time
			,	count(*) as TOTAL_COUNT
			<if test="divisionBy=='groupBy'">
			,	SUM(COALESCE(TOTAL_USER, 0)) AS TOTAL_USER
			</if>
		FROM
		(
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						R_USER_ID
					,	R_USER_NAME
					,	R_EXT_NO
					,	R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					</when>
					<otherwise>
						R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					,   count(*) as  TOTAL_USER				
					</otherwise>
				</choose>
			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID != 'admin'
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="divisionBy=='groupBy'">
					GROUP BY 
						R_BG_CODE 			
						,	R_MG_CODE 				
						,	R_SG_CODE 
				</if>
				
		) AS USER_INFO

		
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON 
			<choose>
				<when test="divisionBy=='userBy'">
					USER_INFO.r_user_id = RECFILE.r_user_id
				</when>
				<otherwise>
					USER_INFO.R_BG_CODE = RECFILE.R_BG_CODE
				and USER_INFO.R_MG_CODE = RECFILE.R_MG_CODE
				and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE
				</otherwise>
			</choose>
	</select>
	
	<select id="totalUsersCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
		WITH INLINE AS (
					SELECT TO_NUMBER(R_CONFIG_VALUE) AS INLINE_LENGTH
					FROM RS_ETC_CONFIG
					WHERE R_CONFIG_KEY='INLINE_LENGTH'
			)
			,TMP_RECFILE AS (
			
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						r_user_id
					</when>
					<otherwise>
						r_bg_code
					,	r_mg_code
					,	r_sg_code
					</otherwise>
				</choose>				
				,	COUNT(*) AS TOTAL_CALLS				
				,	SUM( TO_NUMBER(
						TO_CHAR(
								(CASE WHEN (RS_RECFILE.R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END)
								 , 'sssss')	
						) 
					) AS TOTAL_TIME	
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT				
				,	ROUND(
						AVG(
			              TO_NUMBER(
			              TO_CHAR(
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME <![CDATA[<]]> R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END)
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END
								 
								 , 'sssss')				
             					 ) 
							) 
							,2) 
            AS AVG_CALL_TIME
				FROM RS_RECFILE, INLINE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
			    <choose>
					<when test="divisionBy=='userBy'">
						RS_RECFILE.r_user_id
					</when>
					<otherwise>
						RS_RECFILE.r_bg_code
						, RS_RECFILE.r_mg_code
						, RS_RECFILE.r_sg_code
					</otherwise>
				</choose>
		)
		SELECT
			SUM(COALESCE(TOTAL_CALLS, 0)) AS TOTAL_CALLS
			,	SUM(COALESCE(SUCCESS_CONNECT, 0)) AS SUCCESS_CONNECT
			,	SUM(COALESCE(TOTAL_TIME, 0)) AS TOTAL_TIME
			,	SUM(COALESCE(avg_call_time, 0)) AS avg_call_time
			,	count(*) as TOTAL_COUNT
			<if test="divisionBy=='groupBy'">
			,	SUM(COALESCE(TOTAL_USER, 0)) AS TOTAL_USER
			</if>
		FROM
		(
			SELECT
				<choose>
					<when test="divisionBy=='userBy'">
						R_USER_ID
					,	R_USER_NAME
					,	R_EXT_NO
					,	R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					</when>
					<otherwise>
						R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
					,   count(*) as  TOTAL_USER				
					</otherwise>
				</choose>
			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID != 'admin'
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="divisionBy=='groupBy'">
					GROUP BY 
						R_BG_CODE 			
						,	R_MG_CODE 				
						,	R_SG_CODE 
				</if>
				
		) USER_INFO

		
		LEFT JOIN TMP_RECFILE RECFILE
		ON 
			<choose>
				<when test="divisionBy=='userBy'">
					USER_INFO.r_user_id = RECFILE.r_user_id
				</when>
				<otherwise>
					USER_INFO.R_BG_CODE = RECFILE.R_BG_CODE
				and USER_INFO.R_MG_CODE = RECFILE.R_MG_CODE
				and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE
				</otherwise>
			</choose>
	</select>
	
	<!-- 모바일 콜 상세 통계 -->
	<select id="selectDetailsCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultMap="BaseResultMap">
		WITH TMP_RECFILE AS (
			SELECT
					r_user_id
					<if test='authBeforeGroup != "Y"'>
						,	r_bg_code
						,	r_mg_code
						,	r_sg_code
					</if>
								
				,	COUNT(*) AS TOTAL_CALLS		
				,	SUM(
						EXTRACT(
							'EPOCH' FROM (
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (r_call_kind1 = 'O' AND R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
										ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
										END)::TIME
									ELSE '000000'::TIME
									END
								ELSE '000000'::TIME
								END									
							)
						)
					)::INTEGER AS OUTBOUND_TIME 
				,	SUM(
						EXTRACT(
							'EPOCH' FROM (
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (r_call_kind1 = 'I' AND R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
										ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
										END)::TIME
									ELSE '000000'::TIME
									END
								ELSE '000000'::TIME
								END									
							)
						)
					)::INTEGER AS INBOUND_TIME 
				,	SUM(
						EXTRACT(
							'EPOCH' FROM (
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
										ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
										END)::TIME
									ELSE '000000'::TIME
									END
								ELSE '000000'::TIME
								END									
							)
						)
					)::INTEGER AS TOTAL_TIME 
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT			
				,	ROUND(
						AVG(
							EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (r_call_kind1 = 'O' AND R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						)::INTEGER
						,2
					) AS OUTBOUND_AVG_CALL_TIME
				,	ROUND(
						AVG(
							EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (r_call_kind1 = 'I' AND R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						)::INTEGER
						,2
					) AS INBOUND_AVG_CALL_TIME	
				,	ROUND(
						AVG(
							EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						)::INTEGER
						,2
					) AS AVG_CALL_TIME
				,	SUM(CASE WHEN r_buffer4 = 'D' THEN 1 ELSE 0 END) AS CL01_try
				,	SUM(CASE WHEN r_buffer4 = 'D' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL01_conn
				,	SUM(CASE WHEN r_buffer4 = 'B' THEN 1 ELSE 0 END) AS CL02_try
				,	SUM(CASE WHEN r_buffer4 = 'B' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL02_conn
				,	SUM(CASE WHEN r_buffer4 = 'A' THEN 1 ELSE 0 END) AS CL03_try
				,	SUM(CASE WHEN r_buffer4 = 'A' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL03_conn
				,	SUM(CASE WHEN r_buffer4 = 'E' THEN 1 ELSE 0 END) AS CL04_try
				,	SUM(CASE WHEN r_buffer4 = 'E' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL04_conn
				,	SUM(CASE WHEN r_buffer4 = 'F' THEN 1 ELSE 0 END) AS CL05_try
				,	SUM(CASE WHEN r_buffer4 = 'F' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL05_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL06_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL06_conn
				,	SUM(CASE WHEN r_buffer4 = 'C' THEN 1 ELSE 0 END) AS CL07_try
				,	SUM(CASE WHEN r_buffer4 = 'C' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL07_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL08_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL08_conn
				,	SUM(CASE WHEN ((r_buffer4 = 'D' and r_call_ttime != '00') or (r_buffer4 = 'E' and r_call_ttime != '00')) THEN 1 ELSE 0 END) AS CL01CL04_sum_conn
				,	SUM(
						CASE WHEN (R_BUFFER4 = 'D' OR R_BUFFER4 = 'E') 
						THEN  EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						ELSE 0 
						END
					) AS CL01CL04_CALL_TIME
				,	SUM(
						CASE WHEN R_BUFFER4 = 'D'
						THEN  EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						ELSE 0 
						END
					) AS CL01_CALL_TIME
				,	SUM(
						CASE WHEN R_BUFFER4 = 'E'
						THEN  EXTRACT(
								'EPOCH' FROM (
									CASE WHEN (R_CALL_TTIME != '00') 
									THEN
										CASE WHEN (R_CALL_STIME_CONNECT IS NOT NULL AND R_CALL_STIME_CONNECT != '' AND R_CALL_STIME_CONNECT != '0') 
										THEN 
											(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
											THEN ('240000'::TIME-R_CALL_STIME_CONNECT::TIME+R_CALL_ETIME::TIME)::TIME
											ELSE (R_CALL_ETIME::TIME-R_CALL_STIME_CONNECT::TIME)::TIME
											END)::TIME
										ELSE '000000'::TIME
										END
									ELSE '000000'::TIME
									END									
								)
							)
						ELSE 0 
						END
					) AS CL04_CALL_TIME ,
			        SUM(CASE WHEN r_call_kind1 = 'O' THEN 1 ELSE 0 END ) AS OUTBOUND_CALLS_try,
			        SUM(CASE WHEN r_call_kind1 = 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS OUTBOUND_CALLS_conn,             
					SUM(CASE WHEN r_call_kind1 != 'O' THEN 1 ELSE 0 END ) AS INBOUND_CALLS_try,
					SUM(CASE WHEN r_call_kind1 != 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS INBOUND_CALLS_conn
							
					
			FROM RS_RECFILE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
				RS_RECFILE.r_user_id
				
				<if test='authBeforeGroup != "Y"'>
					, RS_RECFILE.r_bg_code
					, RS_RECFILE.r_mg_code
					, RS_RECFILE.r_sg_code
				</if>
		)
		SELECT
			ROW_NUMBER() OVER() AS ROWNUMBER,
			USER_INFO.R_USER_ID,			
			R_USER_NAME,			
			R_EXT_NO,
			USER_INFO.R_BG_CODE,			
			USER_INFO.R_MG_CODE,			
			USER_INFO.R_SG_CODE,			
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,
			COALESCE(SUCCESS_CONNECT, 0) AS SUCCESS_CONNECT,
			COALESCE(OUTBOUND_TIME, 0) AS OUTBOUND_TIME,
			COALESCE(INBOUND_TIME, 0) AS INBOUND_TIME,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(outbound_avg_call_time, 0) AS outbound_avg_call_time,
			COALESCE(inbound_avg_call_time, 0) AS inbound_avg_call_time,
			COALESCE(avg_call_time, 0) AS avg_call_time,
			COALESCE(CL01_try, 0) AS CL01_try,
			COALESCE(CL01_conn, 0) AS CL01_conn,
			COALESCE(CL02_try, 0) AS CL02_try,
			COALESCE(CL02_conn, 0) AS CL02_conn,
			COALESCE(CL03_try, 0) AS CL03_try,
			COALESCE(CL03_conn, 0) AS CL03_conn,
			COALESCE(CL04_try, 0) AS CL04_try,
			COALESCE(CL04_conn, 0) AS CL04_conn,
			COALESCE(CL05_try, 0) AS CL05_try,
			COALESCE(CL05_conn, 0) AS CL05_conn,
			COALESCE(CL06_try, 0) AS CL06_try,
			COALESCE(CL06_conn, 0) AS CL06_conn,
			COALESCE(CL07_try, 0) AS CL07_try,
			COALESCE(CL07_conn, 0) AS CL07_conn,
			COALESCE(CL08_try, 0) AS CL08_try,
			COALESCE(CL08_conn, 0) AS CL08_conn,
			COALESCE(CL01CL04_sum_conn, 0) AS CL01CL04_sum_conn,
			COALESCE(CL01CL04_call_time, 0) AS CL01CL04_call_time,
			COALESCE(CL01_call_time, 0) AS CL01_call_time,
			COALESCE(CL04_call_time, 0) AS CL04_call_time,
			COALESCE(OUTBOUND_CALLS_try, 0) AS OUTBOUND_CALLS_try,
			COALESCE(OUTBOUND_CALLS_conn, 0) AS OUTBOUND_CALLS_conn,
			COALESCE(INBOUND_CALLS_try, 0) AS INBOUND_CALLS_try,
			COALESCE(INBOUND_CALLS_conn, 0) AS INBOUND_CALLS_conn
		FROM
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID != 'admin'
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
		) AS USER_INFO

		
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON 
			USER_INFO.r_user_id = RECFILE.r_user_id
			
			<if test='authBeforeGroup != "Y"'>
				and USER_INFO.R_BG_CODE = RECFILE.R_BG_CODE
				and USER_INFO.R_MG_CODE = RECFILE.R_MG_CODE
				and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE
			</if>
		WHERE TOTAL_CALLS>0
		
		ORDER BY
			<choose>
				<when test="col!=null and order!=null">
				#{col} #{order}
					<if test="col != 'rownumber'">
						, ROWNUMBER
					</if>
				</when>
				<otherwise>
					ROWNUMBER
				,	R_USER_NAME
				,	R_USER_ID
				,	R_SG_CODE				
				</otherwise>
			</choose>
			<choose>
				<when test='excelDownload == "Y"'>

				</when>
				<otherwise>
					<choose>
						<when test="count != null and posStart != null">
							LIMIT #{count} OFFSET #{posStart}
						</when>
						<otherwise>
							LIMIT 20 OFFSET 0
						</otherwise>
					</choose>
				</otherwise>
			</choose>
	</select>
	
	<select id="selectDetailsCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultMap="BaseResultMap">
	SELECT *
		    FROM (
		      SELECT PAGE.*, ROWNUM RNUM
		      FROM (
		      
		      
		WITH TMP_RECFILE AS (
			SELECT
					r_user_id
				,	r_sg_code				
				,	COUNT(*) AS TOTAL_CALLS		
				,	SUM( TO_NUMBER(
						TO_CHAR(
								(CASE WHEN (RS_RECFILE.R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END)
								 , 'sssss')		
						)
					) AS TOTAL_TIME	
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT				
				,	ROUND(
						AVG(
			              TO_NUMBER(
			              TO_CHAR(
								CASE WHEN (R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										(CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END)
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END
								 
								 , 'sssss')						
             				 ) 
						) 
						,2	) 
           			AS AVG_CALL_TIME
				,	SUM(CASE WHEN r_buffer4 = 'D' THEN 1 ELSE 0 END) AS CL01_try
				,	SUM(CASE WHEN r_buffer4 = 'D' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL01_conn
				,	SUM(CASE WHEN r_buffer4 = 'B' THEN 1 ELSE 0 END) AS CL02_try
				,	SUM(CASE WHEN r_buffer4 = 'B' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL02_conn
				,	SUM(CASE WHEN r_buffer4 = 'A' THEN 1 ELSE 0 END) AS CL03_try
				,	SUM(CASE WHEN r_buffer4 = 'A' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL03_conn
				,	SUM(CASE WHEN r_buffer4 = 'E' THEN 1 ELSE 0 END) AS CL04_try
				,	SUM(CASE WHEN r_buffer4 = 'E' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL04_conn
				,	SUM(CASE WHEN r_buffer4 = 'F' THEN 1 ELSE 0 END) AS CL05_try
				,	SUM(CASE WHEN r_buffer4 = 'F' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL05_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL06_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL06_conn
				,	SUM(CASE WHEN r_buffer4 = 'C' THEN 1 ELSE 0 END) AS CL07_try
				,	SUM(CASE WHEN r_buffer4 = 'C' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL07_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL08_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL08_conn
				,	SUM(CASE WHEN ((r_buffer4 = 'D' and r_call_ttime != '00') or (r_buffer4 = 'E' and r_call_ttime != '00')) THEN 1 ELSE 0 END) AS CL01CL04_sum_conn
				,	SUM(
						CASE WHEN (R_BUFFER4 = 'D' OR R_BUFFER4 = 'E') 
						THEN TO_NUMBER( TO_CHAR(
								(CASE WHEN (RS_RECFILE.R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END)
								 , 'sssss')
                 )
							
						ELSE 0 
						END
					) AS CL01CL04_CALL_TIME
				,	SUM(
						CASE WHEN R_BUFFER4 = 'D'
						THEN TO_NUMBER( TO_CHAR(
								(CASE WHEN (RS_RECFILE.R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END)
								 , 'sssss')
                 )
							
						ELSE 0 
						END
					) AS CL01_CALL_TIME
				,	SUM(
						CASE WHEN R_BUFFER4 = 'E'
						THEN TO_NUMBER( TO_CHAR(
								(CASE WHEN (RS_RECFILE.R_CALL_TTIME != '00') 
								THEN
									CASE WHEN (R_CALL_STIME_CONNECT != '0') 
									THEN 
										CASE WHEN (R_CALL_ETIME &lt; R_CALL_STIME_CONNECT) 
										THEN TO_TIMESTAMP('240000', 'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP(R_CALL_ETIME, 'hh25miss')
										ELSE TO_TIMESTAMP(R_CALL_ETIME,'hh25miss')-TO_TIMESTAMP(R_CALL_STIME_CONNECT,'hh25miss')+TO_TIMESTAMP('000000', 'hh25miss')
										END
									ELSE TO_TIMESTAMP('000000','hh25miss')
									END
								ELSE TO_TIMESTAMP('000000', 'hh25miss')
								END)
								 , 'sssss')
                 )
							
						ELSE 0 
						END
					) AS CL04_CALL_TIME,
			        SUM(CASE WHEN r_call_kind1 = 'O' THEN 1 ELSE 0 END ) AS OUTBOUND_CALLS_try,
			        SUM(CASE WHEN r_call_kind1 = 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS OUTBOUND_CALLS_conn,             
					SUM(CASE WHEN r_call_kind1 != 'O' THEN 1 ELSE 0 END ) AS INBOUND_CALLS_try,
					SUM(CASE WHEN r_call_kind1 != 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS INBOUND_CALLS_conn
			FROM RS_RECFILE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
					RS_RECFILE.r_user_id
					, RS_RECFILE.r_sg_code
		)
		SELECT
			<!-- ROW_NUMBER() OVER(ORDER BY R_USER_NAME
									,	R_USER_ID
									,	R_SG_CODE) AS ROWNUMBER, -->
			ROWNUM AS ROWNUMBER,
			USER_INFO.R_USER_ID,			
			R_USER_NAME,			
			R_EXT_NO,
			USER_INFO.R_BG_CODE,			
			USER_INFO.R_MG_CODE,			
			USER_INFO.R_SG_CODE,			
			COALESCE(TOTAL_CALLS, 0) AS TOTAL_CALLS,			
			COALESCE(SUCCESS_CONNECT, 0) AS SUCCESS_CONNECT,
			COALESCE(TOTAL_TIME, 0) AS TOTAL_TIME,
			COALESCE(avg_call_time, 0) AS avg_call_time,
			COALESCE(CL01_try, 0) AS CL01_try,
			COALESCE(CL01_conn, 0) AS CL01_conn,
			COALESCE(CL02_try, 0) AS CL02_try,
			COALESCE(CL02_conn, 0) AS CL02_conn,
			COALESCE(CL03_try, 0) AS CL03_try,
			COALESCE(CL03_conn, 0) AS CL03_conn,
			COALESCE(CL04_try, 0) AS CL04_try,
			COALESCE(CL04_conn, 0) AS CL04_conn,
			COALESCE(CL05_try, 0) AS CL05_try,
			COALESCE(CL05_conn, 0) AS CL05_conn,
			COALESCE(CL06_try, 0) AS CL06_try,
			COALESCE(CL06_conn, 0) AS CL06_conn,
			COALESCE(CL07_try, 0) AS CL07_try,
			COALESCE(CL07_conn, 0) AS CL07_conn,
			COALESCE(CL08_try, 0) AS CL08_try,
			COALESCE(CL08_conn, 0) AS CL08_conn,
			COALESCE(CL01CL04_sum_conn, 0) AS CL01CL04_sum_conn,
			COALESCE(CL01CL04_call_time, 0) AS CL01CL04_call_time,
			COALESCE(CL01_call_time, 0) AS CL01_call_time,
			COALESCE(CL04_call_time, 0) AS CL04_call_time,
			COALESCE(OUTBOUND_CALLS_try, 0) AS OUTBOUND_CALLS_try,
			COALESCE(OUTBOUND_CALLS_conn, 0) AS OUTBOUND_CALLS_conn,
			COALESCE(INBOUND_CALLS_try, 0) AS INBOUND_CALLS_try,
			COALESCE(INBOUND_CALLS_conn, 0) AS INBOUND_CALLS_conn
		FROM
		(
				SELECT
						R_USER_ID
					,	R_USER_NAME
					,	R_EXT_NO
					,	R_BG_CODE
					,	R_MG_CODE
					,	R_SG_CODE
	
				FROM
					RS_RUSER_INFO
				WHERE
					<if test="init == 'true'">
					1=0 and
					</if>
						R_USER_ID != 'admin'
					<if test="bgCodeL !=null and bgCodeL.size!=0">
						AND R_BG_CODE IN
						<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="mgCodeL !=null and mgCodeL.size!=0">
						AND R_MG_CODE IN
						<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="sgCodeL !=null and sgCodeL.size!=0">
						AND R_SG_CODE IN
						<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test="userIdL !=null and userIdL.size!=0">
						AND R_USER_ID in
						<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
			) USER_INFO
	
			
			LEFT JOIN TMP_RECFILE RECFILE
			ON 
					USER_INFO.r_user_id = RECFILE.r_user_id
				and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE			
			WHERE TOTAL_CALLS>0
			
			ORDER BY
				<choose>
					<when test="col!=null and order!=null">
					#{col} #{order}
						<if test="col != 'rownumber'">
							, ROWNUMBER
						</if>
					</when>
					<otherwise>
						ROWNUMBER
					,	R_USER_NAME
					,	R_USER_ID
					,	R_SG_CODE				
					</otherwise>
				</choose>
				<choose>
					<when test='excelDownload == "Y"'>
	
					</when>
					<otherwise>
						<choose>
							<when test="count != null and posStart != null">
								<!-- LIMIT #{count} OFFSET #{posStart} -->
								) PAGE
					    WHERE ROWNUM <![CDATA[<=]]> TO_NUMBER(#{count}+#{posStart})
					  ) PAGE
					  WHERE RNUM <![CDATA[>]]> #{posStart}
							</when>
							<otherwise>
								<!-- LIMIT 20 OFFSET 0 -->
								) PAGE
					    WHERE ROWNUM <![CDATA[<=]]> 20
					  ) PAGE
					  WHERE RNUM <![CDATA[>]]> 0
							</otherwise>
						</choose>
					</otherwise>
				</choose>
	</select>
	
	<!-- 모바일 콜 상세 통계 카운트용 -->
	<select id="totalDetailsCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="postgres" resultType="Integer">
		WITH TMP_RECFILE AS (
			SELECT
					r_user_id
					<if test='authBeforeGroup != "Y"'>
						,	r_bg_code
						,	r_mg_code
						,	r_sg_code
					</if>			
				,	COUNT(*) AS TOTAL_CALLS				
				,	SUM(COALESCE(R_CALL_TTIME :: INTEGER,0)) AS TOTAL_TIME				
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT				
				,	round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				,	SUM(CASE WHEN r_buffer4 = 'D' THEN 1 ELSE 0 END) AS CL01_try
				,	SUM(CASE WHEN r_buffer4 = 'D' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL01_conn
				,	SUM(CASE WHEN r_buffer4 = 'B' THEN 1 ELSE 0 END) AS CL02_try
				,	SUM(CASE WHEN r_buffer4 = 'B' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL02_conn
				,	SUM(CASE WHEN r_buffer4 = 'A' THEN 1 ELSE 0 END) AS CL03_try
				,	SUM(CASE WHEN r_buffer4 = 'A' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL03_conn
				,	SUM(CASE WHEN r_buffer4 = 'E' THEN 1 ELSE 0 END) AS CL04_try
				,	SUM(CASE WHEN r_buffer4 = 'E' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL04_conn
				,	SUM(CASE WHEN r_buffer4 = 'F' THEN 1 ELSE 0 END) AS CL05_try
				,	SUM(CASE WHEN r_buffer4 = 'F' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL05_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL06_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL06_conn
				,	SUM(CASE WHEN r_buffer4 = 'C' THEN 1 ELSE 0 END) AS CL07_try
				,	SUM(CASE WHEN r_buffer4 = 'C' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL07_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL08_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL08_conn
				,	SUM(CASE WHEN (r_buffer4 = 'D' or r_buffer4 = 'E') THEN COALESCE(R_CALL_TTIME :: INTEGER,0) ELSE 0 END) AS CL01CL04_call_time
				,	SUM(CASE WHEN r_buffer4 = 'D' THEN COALESCE(R_CALL_TTIME :: INTEGER,0) ELSE 0 END) AS CL01_call_time
				,	SUM(CASE WHEN r_buffer4 = 'E' THEN COALESCE(R_CALL_TTIME :: INTEGER,0) ELSE 0 END) AS CL04_call_time
				,   SUM(CASE WHEN r_call_kind1 = 'O' THEN 1 ELSE 0 END ) AS OUTBOUND_CALLS_try
			    ,   SUM(CASE WHEN r_call_kind1 = 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS OUTBOUND_CALLS_conn             
				,	SUM(CASE WHEN r_call_kind1 != 'O' THEN 1 ELSE 0 END ) AS INBOUND_CALLS_try
				,	SUM(CASE WHEN r_call_kind1 != 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS INBOUND_CALLS_conn
				
				FROM RS_RECFILE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				and r_bg_code = #{authBeforeGroup}
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
					RS_RECFILE.r_user_id
					<if test='authBeforeGroup != "Y"'>
						, RS_RECFILE.r_bg_code
						, RS_RECFILE.r_mg_code
						, RS_RECFILE.r_sg_code
					</if>
		)
		SELECT
			count(*)
		FROM
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID != 'admin'
				<if test='authBeforeGroup != "Y" and bgCodeL !=null and bgCodeL.size!=0'>
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and mgCodeL !=null and mgCodeL.size!=0'>
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='authBeforeGroup != "Y" and sgCodeL !=null and sgCodeL.size!=0'>
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
		) AS USER_INFO

		
		LEFT JOIN TMP_RECFILE AS RECFILE
		ON 
			USER_INFO.r_user_id = RECFILE.r_user_id
			<if test='authBeforeGroup != "Y"'>
				and USER_INFO.R_BG_CODE = RECFILE.R_BG_CODE
				and USER_INFO.R_MG_CODE = RECFILE.R_MG_CODE
				and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE
			</if>
				
		WHERE TOTAL_CALLS>0
	</select>
	
	<select id="totalDetailsCallsMobileStatistics"  parameterType="com.furence.recsee.statistics.model.StatisticsInfo" databaseId="oracle" resultType="Integer">
		WITH TMP_RECFILE AS (
			SELECT
					r_user_id
				,	r_sg_code				
				,	COUNT(*) AS TOTAL_CALLS				
				,	SUM(COALESCE(TO_NUMBER(R_CALL_TTIME),0)) AS TOTAL_TIME				
				,	SUM(CASE WHEN r_call_ttime != '00' THEN 1 ELSE 0 END) AS SUCCESS_CONNECT				
				,	round(avg(CAST(CASE WHEN R_CALL_TTIME IS NULL THEN '0' ELSE R_CALL_TTIME END AS INTEGER)),2) as avg_call_time
				,	SUM(CASE WHEN r_buffer4 = 'D' THEN 1 ELSE 0 END) AS CL01_try
				,	SUM(CASE WHEN r_buffer4 = 'D' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL01_conn
				,	SUM(CASE WHEN r_buffer4 = 'B' THEN 1 ELSE 0 END) AS CL02_try
				,	SUM(CASE WHEN r_buffer4 = 'B' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL02_conn
				,	SUM(CASE WHEN r_buffer4 = 'A' THEN 1 ELSE 0 END) AS CL03_try
				,	SUM(CASE WHEN r_buffer4 = 'A' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL03_conn
				,	SUM(CASE WHEN r_buffer4 = 'E' THEN 1 ELSE 0 END) AS CL04_try
				,	SUM(CASE WHEN r_buffer4 = 'E' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL04_conn
				,	SUM(CASE WHEN r_buffer4 = 'F' THEN 1 ELSE 0 END) AS CL05_try
				,	SUM(CASE WHEN r_buffer4 = 'F' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL05_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL06_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL06_conn
				,	SUM(CASE WHEN r_buffer4 = 'C' THEN 1 ELSE 0 END) AS CL07_try
				,	SUM(CASE WHEN r_buffer4 = 'C' and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL07_conn
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) THEN 1 ELSE 0 END) AS CL08_try
				,	SUM(CASE WHEN (r_buffer4 = 'G' or r_buffer4 IS NULL) and r_call_ttime != '00' THEN 1 ELSE 0 END) AS CL08_conn
				,	SUM(CASE WHEN (r_buffer4 = 'D' or r_buffer4 = 'E') THEN COALESCE(TO_NUMBER(R_CALL_TTIME),0) ELSE 0 END) AS CL01CL04_call_time
				,	SUM(CASE WHEN r_buffer4 = 'D' THEN COALESCE(TO_NUMBER(R_CALL_TTIME),0) ELSE 0 END) AS CL01_call_time
				,	SUM(CASE WHEN r_buffer4 = 'E' THEN COALESCE(TO_NUMBER(R_CALL_TTIME),0) ELSE 0 END) AS CL04_call_time
				,   SUM(CASE WHEN r_call_kind1 = 'O' THEN 1 ELSE 0 END ) AS OUTBOUND_CALLS_try
			    ,   SUM(CASE WHEN r_call_kind1 = 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS OUTBOUND_CALLS_conn             
				,	SUM(CASE WHEN r_call_kind1 != 'O' THEN 1 ELSE 0 END ) AS INBOUND_CALLS_try
				,	SUM(CASE WHEN r_call_kind1 != 'O' AND r_call_ttime != '00' THEN 1  ELSE 0 END ) AS INBOUND_CALLS_conn
				FROM RS_RECFILE
			WHERE
				R_REC_DATE BETWEEN #{sDate} AND #{eDate}
				AND RS_RECFILE.R_USER_ID IS NOT NULL
				AND RS_RECFILE.R_BG_CODE IS NOT NULL
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND RS_RECFILE.R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="vSysCode != null">
				AND RS_RECFILE.R_V_SYS_CODE = #{vSysCode}
				</if>
			GROUP BY				
					RS_RECFILE.r_user_id
					, RS_RECFILE.r_sg_code
		)
		SELECT
			count(*)
		FROM
		(
			SELECT
					R_USER_ID
				,	R_USER_NAME
				,	R_EXT_NO
				,	R_BG_CODE
				,	R_MG_CODE
				,	R_SG_CODE

			FROM
				RS_RUSER_INFO
			WHERE
				<if test="init == 'true'">
				1=0 and
				</if>
					R_USER_ID != 'admin'
				<if test="bgCodeL !=null and bgCodeL.size!=0">
					AND R_BG_CODE IN
					<foreach collection="bgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="mgCodeL !=null and mgCodeL.size!=0">
					AND R_MG_CODE IN
					<foreach collection="mgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="sgCodeL !=null and sgCodeL.size!=0">
					AND R_SG_CODE IN
					<foreach collection="sgCodeL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test="userIdL !=null and userIdL.size!=0">
					AND R_USER_ID in
					<foreach collection="userIdL" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
		) USER_INFO

		
		LEFT JOIN TMP_RECFILE RECFILE
		ON 
				USER_INFO.r_user_id = RECFILE.r_user_id
			and USER_INFO.R_SG_CODE = RECFILE.R_SG_CODE
		WHERE TOTAL_CALLS>0
	</select>
	<!-- 키워드 통계 -->
   <select id="selectKeyword" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="keyWordResultMap">
      SELECT * 
      FROM RS_KEYWORD_LIST
   </select>
   <select id="selectCategory" parameterType="com.furence.recsee.statistics.model.StatisticsInfo" resultMap="keyWordResultMap">
      SELECT * 
      FROM RS_KEYWORD_CATEGORY_LIST
   </select>
   
</mapper>